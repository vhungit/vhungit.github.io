[1,["1dsBnhjslKVL2/d/MtsVDN@2051a","d3x4IMKphEKYvHuEU7yaxB","12Y9dMgWdJKJGmTiZyQR9H@a804a","1brw/JvvpFnIvdrxpFCgMZ","6bbyXHW+VChoSInf1D/nNS@bf369","1dsBnhjslKVL2/d/MtsVDN@7d6ab","1dsBnhjslKVL2/d/MtsVDN@44826","1dsBnhjslKVL2/d/MtsVDN@30732","1dsBnhjslKVL2/d/MtsVDN@9b4f5","1dsBnhjslKVL2/d/MtsVDN@f1394","1dsBnhjslKVL2/d/MtsVDN@034b2","1dsBnhjslKVL2/d/MtsVDN@75ee4","1dsBnhjslKVL2/d/MtsVDN@40b15","1dsBnhjslKVL2/d/MtsVDN@a72ab","1dsBnhjslKVL2/d/MtsVDN@9ff0c","1dsBnhjslKVL2/d/MtsVDN@2224c","1dsBnhjslKVL2/d/MtsVDN@a62fe","1dsBnhjslKVL2/d/MtsVDN@62756","1dsBnhjslKVL2/d/MtsVDN@1e224","1dsBnhjslKVL2/d/MtsVDN@7d08b","1dsBnhjslKVL2/d/MtsVDN@040d6","1dsBnhjslKVL2/d/MtsVDN@b5902","1dsBnhjslKVL2/d/MtsVDN@8d838","1dsBnhjslKVL2/d/MtsVDN@2d5df","1dsBnhjslKVL2/d/MtsVDN@39452","1dsBnhjslKVL2/d/MtsVDN@8feb8","12Y9dMgWdJKJGmTiZyQR9H@2e76e","12Y9dMgWdJKJGmTiZyQR9H@17020","1dsBnhjslKVL2/d/MtsVDN@5f812","6aAyKQYAFOg7RerjhBy2K9@5f837","18G59iW4xGHrV9H7U5PGRK@eed07","dcTm22RaBN/5C0FKCX9OD3@a77fa","74Xf4StEpH86ZuZ8Xfq+Kb@b84cf","292AOrXyZN5bU80kehydwH@130ce","b9/LgRU9NLRo6Kjw7OqMKF"],["node","_mesh","_parent","_skeleton","value","root","_effectAsset","mainTexture","data","target","source","_cameraComponent","scene","asset","protobufApi"],[["cc.Node",["_name","_id","_objFlags","__editorExtras__","_parent","_components","_prefab","_lpos","_lrot","_euler","_lscale","_children"],-1,1,9,4,5,5,5,5,12],["cc.Node",["_name","_children","_prefab","_lpos","_parent","_lrot","_euler","_lscale","_components"],2,2,4,5,1,5,5,5,12],["cc.Material",["_defines","_name","_states","_props"],0,12],["cc.Node",["_name","_parent","_lpos","_children","_prefab","_components"],2,1,5,9,4,2],["cc.Node",["_name","_id","_layer","_parent","_children","_components","_lpos"],0,1,2,9,5],["cc.PrefabInfo",["fileId","root","asset","targetOverrides"],2,1,1,9],["cc.BoxCollider",["node","_size","_center"],3,1,5,5],["cc.Camera",["_visibility","_projection","_priority","_orthoHeight","_far","_clearFlags","node","_color"],-3,1,5],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.Prefab",[],3],["cc.PrefabInfo",["fileId","root","instance","asset"],2,1,4,6],["cc.SkeletalAnimation",["node","__prefab"],3,1,4],["cc.CompPrefabInfo",["fileId"],2],["cc.SkinnedMeshRenderer",["node","__prefab","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],3,1,4,3,4,1,6,6],["cc.ModelLightmapSettings",[],3],["cc.JsonAsset",["_name","json"],1],["cc.SceneAsset",["_name"],2],["cc.TargetInfo",["localID"],2],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.TargetOverrideInfo",["propertyPath","source","target","targetInfo"],2,1,1,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog"],3,4,4,4,4],["cc.AmbientInfo",[],3],["cc.ShadowsInfo",["_shadowColor"],3,5],["cc.SkyboxInfo",[],3],["cc.FogInfo",[],3],["cc.RigidBody",["_allowSleep","node"],2,1],["23526LZJ8FFNLKcD+3Pr7aj",["node"],3,1],["cc.UITransform",["node","_contentSize"],3,1,5],["cc.Canvas",["node","_cameraComponent"],3,1,1],["cc.Widget",["_alignFlags","node"],2,1],["47b09oXRZdCr7sUwkusXwAq",["node"],3,1],["5a02dY0DwhDo4SDHqcWY/Ha",["node","target"],3,1,1],["cc.MeshRenderer",["_name","node","_materials","lightmapSettings","_mesh"],2,1,3,4,6],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides"],1,9],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,6],["cc.DirectionalLight",["_colorTemperature","_illuminance","node","_staticSettings"],1,1,4],["cc.StaticLightSettings",[],3],["66444v1AmdGj7lSyQFegk+m",["node"],3,1],["9cfd1yEbilLMoe6JljDN9/R",["node","protobufApi"],3,1,6]],[[5,0,1,2,2],[1,0,4,1,2,3,5,6,2],[16,1],[8,0,1,2,3],[0,0,4,6,7,2],[3,0,1,3,4,2,2],[14,0,2],[10,0,1,2,3,4],[15,0,1,2,3,4,5,6,1],[34,0,1,2,3,4,2],[0,0,4,5,7,2],[19,0,2],[39,0,1,2,2],[0,0,4,5,6,7,8,9,2],[37,0,1,2,2],[0,0,4,5,6,7,2],[1,0,1,2,3,5,6,2],[1,0,4,1,2,3,2],[1,0,4,1,2,3,5,7,6,2],[38,0,1,2,3],[9,0,1,2,4],[2,1,2,0,3,4],[2,0,2],[11,1],[0,0,11,5,6,2],[0,0,4,6,2],[0,0,4,5,6,7,8,10,9,2],[0,0,1,4,5,7,8,9,3],[0,0,4,5,7,10,2],[0,2,3,4,6,3],[0,0,1,4,5,8,9,3],[0,0,1,4,5,3],[1,0,1,2,3,2],[1,0,4,1,2,2],[1,0,1,2],[1,0,1,8,2],[1,0,4,1,3,7,2],[3,0,1,5,2,2],[4,0,1,3,4,5,3],[4,0,2,1,3,4,5,6,4],[5,3,1],[12,0,1,2,3,2],[13,0,1,1],[17,0,1,3],[18,0,2],[20,0,1,2,3,2],[21,0,1,2,3,2],[22,0,1,2,3,1],[23,1],[24,0,1],[25,1],[26,1],[27,0,1,2],[6,0,2,1,1],[6,0,1,1],[28,0,1],[29,0,1,1],[30,0,1,1],[31,0,1,2],[32,0,1],[7,0,6,7,2],[7,1,2,3,4,5,0,6,7,7],[33,0,1,1],[35,0,1,2,3],[36,0,1,2,3],[40,0,1,2,3,3],[41,1],[42,0,1],[43,0,1,1]],[[[[3,".bin",3337052603,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":69160,"length":12288,"count":6144,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":69160,"count":1235,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,-0.5],"maxPosition",8,[1,0.5,0.5,0.5]]],-1],0,0,[],[],[]],[[[3,".bin",2714577712,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6776,"length":1200,"count":600,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6776,"count":121,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-5,0,-5],"maxPosition",8,[1,5,0,5]]],-1],0,0,[],[],[]],[[[3,".bin",4094896171,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1344,"length":72,"count":36,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1344,"count":24,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,-0.5],"maxPosition",8,[1,0.5,0.5,0.5]]],-1],0,0,[],[],[]],[[[20,"builtin-standard",[{"hash":3247695832,"name":"builtin-standard|standard-vs|standard-fs","glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nlayout(location = 0) out float v_fog_factor;\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 13) in vec4 a_color;\n  layout(location = 2) out vec4 v_color;\n#endif\nlayout(location = 3) out vec3 v_position;\nlayout(location = 4) out vec3 v_normal;\nlayout(location = 5) out vec2 v_uv;\nlayout(location = 6) out vec2 v_uv1;\n#if USE_NORMAL_MAP\n  layout(location = 7) out vec3 v_tangent;\n  layout(location = 8) out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n    #if CC_USE_FOG == 0\n      v_fog_factor = LinearFog(pos);\n    #elif CC_USE_FOG == 1\n      v_fog_factor = ExpFog(pos);\n    #elif CC_USE_FOG == 2\n      v_fog_factor = ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n      v_fog_factor = LayeredFog(pos);\n    #else\n      v_fog_factor = 1.0;\n    #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(location = 0) in float v_fog_factor;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - s.position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n  finalColor += (ambDiff.rgb * diffuse) * s.occlusion;\n  #if CC_USE_IBL\n    vec3 R = normalize(reflect(-V, N));\n    vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n    #if CC_USE_IBL == 2\n      vec3 env = unpackRGBE(envmap);\n    #else\n      vec3 env = SRGBToLinear(envmap.rgb);\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  #if CC_USE_HDR\n    s.emissive *= cc_exposure.w;\n  #endif\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nlayout(location = 1) in highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) in vec3 v_luv;\n  layout(set = 2, binding = 9) uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nlayout(location = 3) in vec3 v_position;\nlayout(location = 5) in vec2 v_uv;\nlayout(location = 6) in vec2 v_uv1;\nlayout(location = 4) in vec3 v_normal;\n#if USE_VERTEX_COLOR\n  layout(location = 2) in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 7) in vec3 v_tangent;\n  layout(location = 8) in vec3 v_bitangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * miscParams.x) * normalize(v_tangent) +\n      (nmmp.y * miscParams.x) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.w;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, s.position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, s.position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, s.position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  layout(location = 3) out vec4 fragColor3;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(s.position, s.roughness);\n    fragColor2 = vec4(s.normal, s.metallic);\n    fragColor3 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nout float v_fog_factor;\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n    #if CC_USE_FOG == 0\n      v_fog_factor = LinearFog(pos);\n    #elif CC_USE_FOG == 1\n      v_fog_factor = ExpFog(pos);\n    #elif CC_USE_FOG == 2\n      v_fog_factor = ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n      v_fog_factor = LayeredFog(pos);\n    #else\n      v_fog_factor = 1.0;\n    #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nin float v_fog_factor;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - s.position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n  finalColor += (ambDiff.rgb * diffuse) * s.occlusion;\n  #if CC_USE_IBL\n    vec3 R = normalize(reflect(-V, N));\n    vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n    #if CC_USE_IBL == 2\n      vec3 env = unpackRGBE(envmap);\n    #else\n      vec3 env = SRGBToLinear(envmap.rgb);\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  #if CC_USE_HDR\n    s.emissive *= cc_exposure.w;\n  #endif\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\n#if USE_VERTEX_COLOR\n  in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * miscParams.x) * normalize(v_tangent) +\n      (nmmp.y * miscParams.x) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.w;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, s.position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, s.position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, s.position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  layout(location = 3) out vec4 fragColor3;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(s.position, s.roughness);\n    fragColor2 = vec4(s.normal, s.metallic);\n    fragColor3 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n#endif\n      uniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvarying float v_fog_factor;\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n    #if CC_USE_FOG == 0\n      v_fog_factor = LinearFog(pos);\n    #elif CC_USE_FOG == 1\n      v_fog_factor = ExpFog(pos);\n    #elif CC_USE_FOG == 2\n      v_fog_factor = ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n      v_fog_factor = LayeredFog(pos);\n    #else\n      v_fog_factor = 1.0;\n    #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_exposure;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n     uniform vec4 pbrParams;\n     uniform vec4 miscParams;\n     uniform vec4 emissive;\n     uniform vec4 emissiveScaleParam;\nvarying float v_fog_factor;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform lowp vec4 cc_shadowNFLSInfo;\n  uniform lowp vec4 cc_shadowWHPBInfo;\n  uniform lowp vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - s.position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n  finalColor += (ambDiff.rgb * diffuse) * s.occlusion;\n  #if CC_USE_IBL\n    vec3 R = normalize(reflect(-V, N));\n    vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n    #if CC_USE_IBL == 2\n      vec3 env = unpackRGBE(envmap);\n    #else\n      vec3 env = SRGBToLinear(envmap.rgb);\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  #if CC_USE_HDR\n    s.emissive *= cc_exposure.w;\n  #endif\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\n#if USE_VERTEX_COLOR\n  varying vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * miscParams.x) * normalize(v_tangent) +\n      (nmmp.y * miscParams.x) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.w;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, s.position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, s.position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, s.position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(s.position, s.roughness);\n    gl_FragData[2] = vec4(s.normal, s.metallic);\n    gl_FragData[3] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]}]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":220,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":63}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","defines":["USE_NORMAL_MAP"],"options":["v_uv","v_uv1"]},{"name":"PBR_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean","defines":[]},{"name":"USE_OCCLUSION_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"EMISSIVE_UV","type":"string","defines":["USE_EMISSIVE_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]}],"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":2,"defines":[]},{"name":"a_tangent","type":16,"count":1,"stageFlags":1,"format":44,"location":3,"defines":[]},{"name":"a_vertexId","type":13,"count":1,"stageFlags":1,"format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","type":"u32vec4","count":1,"stageFlags":1,"location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","type":16,"count":1,"stageFlags":1,"format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","type":13,"count":1,"stageFlags":1,"format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":13,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","type":14,"count":1,"stageFlags":1,"format":21,"location":14,"defines":[]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"v_shadowPos","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":1,"location":2,"defines":["USE_VERTEX_COLOR"]},{"name":"v_position","type":15,"count":1,"stageFlags":1,"location":3,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":1,"location":4,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":5,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":1,"location":6,"defines":[]},{"name":"v_tangent","type":15,"count":1,"stageFlags":1,"location":7,"defines":["USE_NORMAL_MAP"]},{"name":"v_bitangent","type":15,"count":1,"stageFlags":1,"location":8,"defines":["USE_NORMAL_MAP"]},{"name":"v_luv","type":15,"count":1,"stageFlags":1,"location":9,"defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}]},{"hash":1783225275,"name":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 13) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec2 v_uv1;\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec2 v_uv1;\nlayout(location = 2) in vec4 v_worldPos;\nlayout(location = 3) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\n      uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform lowp vec4 cc_shadowNFLSInfo;\n  uniform lowp vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":183,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":63}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}],"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":2,"defines":[]},{"name":"a_tangent","type":16,"count":1,"stageFlags":1,"format":44,"location":3,"defines":[]},{"name":"a_vertexId","type":13,"count":1,"stageFlags":1,"format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","type":"u32vec4","count":1,"stageFlags":1,"location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","type":16,"count":1,"stageFlags":1,"format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","type":13,"count":1,"stageFlags":1,"format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_texCoord1","type":14,"count":1,"stageFlags":1,"format":21,"location":13,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":1,"location":1,"defines":[]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":1,"location":2,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":1,"location":3,"defines":[]}]}],[{"name":"opaque","passes":[{"program":"builtin-standard|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0,0,0]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}},"migrations":{"properties":{"pbrParams":{"removeImmediately":true}}}},{"phase":"deferred","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","blendState":{"targets":[{"blend":false},{"blend":false},{"blend":false},{"blend":false}]},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0,0,0]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0,0,0]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0,0,0]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0,0,0]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[[3,".bin",1083948911,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":11088,"length":2388,"count":597,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":11088,"count":154,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,3,4,5,7,27,28]]},"minPosition",8,[1,-1.9825799465179443,-1.8909629583358765,-1.9807631969451904],"maxPosition",8,[1,1.9285236597061157,1.8978122472763062,1.8530755043029785]]],-1],0,0,[],[],[]],[[[3,".bin",911065557,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":1512,"length":264,"count":66,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1512,"count":21,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,4,5]]},"minPosition",8,[1,-0.48568934202194214,-0.4307630956172943,-0.1500689685344696],"maxPosition",8,[1,0.43129637837409973,0.43350809812545776,0.16698303818702698]]],-1],0,0,[],[],[]],[[[3,".bin",1061754033,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":8136,"length":2304,"count":576,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8136,"count":113,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,3,4,5,7,27]]},"minPosition",8,[1,-1.5039156675338745,-1.0218578577041626,-1.3932627439498901],"maxPosition",8,[1,1.5037002563476562,-0.00261101801879704,1.2885487079620361]]],-1],0,0,[],[],[]],[[[21,"Tube_1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"mainTexture",6,0]],11]]],0,0,[0,0],[7,6],[5,3]],[[[7,"Skin-4",2194142203,["Armature/mixamorig:Hips","Armature/mixamorig:Hips/mixamorig:Spine","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head/mixamorig:HeadTop_End","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3/mixamorig:LeftHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3/mixamorig:LeftHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3/mixamorig:LeftHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3/mixamorig:LeftHandRing4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3/mixamorig:RightHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3/mixamorig:RightHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3/mixamorig:RightHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3/mixamorig:RightHandRing4","Armature/mixamorig:Hips/mixamorig:LeftUpLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase/mixamorig:LeftToe_End","Armature/mixamorig:Hips/mixamorig:RightUpLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase/mixamorig:RightToe_End"],[[[7,0.9899576902389526,8.129944717438775e-9,-0.14136376976966858,0,1.4751499577414506e-8,1,1.6081422415936686e-7,0,0.14136376976966858,-1.6128460345044004e-7,0.9899576902389526,0,0.6385937333106995,2.8836634159088135,1.1656299829483032,1],[7,0.9899576902389526,0.024335453286767006,-0.1392533779144287,0,1.5887126281199926e-8,0.9850712418556213,0.17214782536029816,0,0.14136376976966858,-0.17041908204555511,0.9751787185668945,0,0.6385937333106995,2.3904645442962646,1.6446444988250732,1],[7,0.9899576902389526,0.02433544583618641,-0.1392533779144287,0,1.701267038356491e-8,0.9850712418556213,0.17214778065681458,0,0.14136376976966858,-0.17041903734207153,0.9751787185668945,0,0.6385937333106995,2.0993945598602295,1.6446442604064941,1],[7,0.9899576902389526,0.02433544583618641,-0.1392534077167511,0,1.779945435487207e-8,0.9850714206695557,0.17214778065681458,0,0.14136378467082977,-0.17041903734207153,0.9751788973808289,0,0.6385937333106995,1.7667427062988281,1.6446446180343628,1],[7,0.9899576902389526,1.141273386906505e-8,-0.14136376976966858,0,1.4751499577414506e-8,1.0000001192092896,1.840364944882822e-7,0,0.14136376976966858,-1.8427368786433362e-7,0.9899576902389526,0,0.6385937333106995,1.6548433303833008,1.380374550819397,1],[7,0.9899576902389526,8.169278586933615e-9,-0.14136376976966858,0,1.4751498689236087e-8,1.0000001192092896,1.610924584838358e-7,0,0.14136376976966858,-1.6156006665823952e-7,0.9899576902389526,0,0.6385937333106995,1.1809957027435303,1.353469967842102,1],[7,0.9899576902389526,8.169280363290454e-9,-0.14136376976966858,0,1.4751498689236087e-8,1.0000001192092896,1.6109247269469051e-7,0,0.14136376976966858,-1.6156008086909424e-7,0.9899576902389526,0,0.6385937333106995,-2.074651002883911,1.168617844581604,1],[7,0.10341095924377441,0.9774060249328613,-0.18434572219848633,0,-0.17110653221607208,-0.16509483754634857,-0.9713218808174133,0,-0.9798102378845215,0.13198809325695038,0.15016800165176392,0,-1.664980411529541,-0.034621063619852066,-1.467038869857788,1],[7,0.1552632451057434,0.7211061716079712,-0.6752030849456787,0,0.13706615567207336,-0.6926059126853943,-0.7081736922264099,0,-0.9783180356025696,0.017405860126018524,-0.20637547969818115,0,-1.1308485269546509,-1.7492234706878662,-1.109979271888733,1],[7,-0.21345922350883484,0.9496765732765198,-0.22923597693443298,0,-0.940508246421814,-0.2632499635219574,-0.21481022238731384,0,-0.2643466293811798,0.169745072722435,0.9493719935417175,0,-2.186321496963501,-1.3668811321258545,1.0006815195083618,1],[7,-0.13690972328186035,0.9905810356140137,-0.002187571721151471,0,-0.08897119015455246,-0.014496228657662868,-0.9959287643432617,0,-0.9865797162055969,-0.13615770637989044,0.09011786431074142,0,-1.2067179679870605,-1.6708160638809204,-2.196092128753662,1],[7,0.7679261565208435,0.4238472580909729,-0.4802531599998474,0,-0.059397079050540924,-0.6994143128395081,-0.7122441530227661,0,-0.6377785801887512,0.5754764080047607,-0.5119232535362244,0,-2.0234215259552,-1.670777440071106,-1.5629018545150757,1],[7,0.767926037311554,0.4611891508102417,-0.4445156455039978,0,-0.05939720198512077,-0.6397103071212769,-0.7663176655769348,0,-0.6377785801887512,0.614878237247467,-0.46385690569877625,0,-1.9971147775650024,-1.6363881826400757,-1.700376033782959,1],[7,0.7679247856140137,0.6006972193717957,-0.2223835438489914,0,-0.05939852446317673,-0.27890363335609436,-0.9584804177284241,0,-0.6377800107002258,0.7492501139640808,-0.17849650979042053,0,-2.0018627643585205,-0.9013881683349609,-2.250373363494873,1],[7,0.7679247856140137,0.60069739818573,-0.222383514046669,0,-0.05939856171607971,-0.278903603553772,-0.9584805369377136,0,-0.6377801299095154,0.7492502331733704,-0.17849639058113098,0,-2.0234251022338867,-0.9393654465675354,-2.2503740787506104,1],[7,0.18584947288036346,0.9693438410758972,-0.16072440147399902,0,-0.08895278722047806,-0.14630411565303802,-0.9852325320243835,0,-0.9785436391830444,0.1974017322063446,0.059035297483205795,0,-1.5875487327575684,-1.699901819229126,-1.9421679973602295,1],[7,0.18584944307804108,0.9669877290725708,-0.17433921992778778,0,-0.08895277976989746,-0.16014376282691956,-0.9830775260925293,0,-0.9785436391830444,0.19821228086948395,0.05625362694263458,0,-1.5874289274215698,-1.8531854152679443,-1.9162975549697876,1],[7,0.18584950268268585,0.9732944369316101,0.1347506046295166,0,-0.08895290642976761,0.15324267745018005,-0.9841769337654114,0,-0.9785435795783997,0.17092230916023254,0.11505745351314545,0,-1.5873684883117676,-1.2745716571807861,-2.4327447414398193,1],[7,0.18584950268268585,0.9732944369316101,0.134750634431839,0,-0.0889529138803482,0.15324272215366364,-0.9841769337654114,0,-0.9785435795783997,0.17092230916023254,0.11505746841430664,0,-1.587548851966858,-1.3513473272323608,-2.432744264602661,1],[7,0.13014966249465942,0.9834471344947815,-0.12606744468212128,0,-0.08963502198457718,-0.11495772004127502,-0.9893183708190918,0,-0.9874345064163208,0.1400594711303711,0.07318959385156631,0,-1.6581038236618042,-1.7174845933914185,-1.9842783212661743,1],[7,0.1301497519016266,0.9733701348304749,-0.18871073424816132,0,-0.08963491022586823,-0.17799928784370422,-0.9799399375915527,0,-0.987434446811676,0.1444539576768875,0.06408137828111649,0,-1.6580947637557983,-1.9669945240020752,-1.862282633781433,1],[7,0.13014988601207733,0.9611400365829468,-0.24345628917217255,0,-0.08963481336832047,-0.23313355445861816,-0.9683051109313965,0,-0.987434446811676,0.14784690737724304,0.05580929294228554,0,-1.658096432685852,-2.19028377532959,-1.7412004470825195,1],[7,0.13014988601207733,0.9611400365829468,-0.24345631897449493,0,-0.08963479101657867,-0.23313358426094055,-0.9683051109313965,0,-0.987434446811676,0.14784690737724304,0.05580926686525345,0,-1.6581037044525146,-2.2720656394958496,-1.741200566291809,1],[7,0.0753372311592102,0.9967902898788452,-0.027081362903118134,0,-0.09002595394849777,-0.02024850621819496,-0.995733916759491,0,-0.9930861592292786,0.07745382189750671,0.08821152150630951,0,-1.7062492370605469,-1.6237365007400513,-2.158897638320923,1],[7,0.07533719390630722,0.9908442497253418,-0.11203435808420181,0,-0.0900259017944336,-0.10513624548912048,-0.9903745651245117,0,-0.9930859804153442,0.08469802141189575,0.08128098398447037,0,-1.706113576889038,-1.8906501531600952,-2.0048880577087402,1],[7,0.075337253510952,0.8996058702468872,-0.43015533685684204,0,-0.09002574533224106,-0.423483282327652,-0.9014196991920471,0,-0.993086040019989,0.10663549602031708,0.04908362030982971,0,-1.7060567140579224,-2.5350990295410156,-1.2436769008636475,1],[7,0.07533726096153259,0.8996058106422424,-0.43015533685684204,0,-0.09002574533224106,-0.423483282327652,-0.9014197587966919,0,-0.993086040019989,0.10663550347089767,0.04908362403512001,0,-1.7062486410140991,-2.595944404602051,-1.243676781654358,1],[7,-0.16017097234725952,-0.9774060845375061,0.1379215568304062,0,0.17104779183864594,-0.16509462893009186,-0.971332311630249,0,0.9721563458442688,-0.1319880336523056,0.1936265379190445,0,1.6288758516311646,-1.2735199928283691,-1.2629095315933228,1],[7,-0.09581544250249863,-0.6901260018348694,0.7173182964324951,0,-0.21053379774093628,-0.690280020236969,-0.6922348737716675,0,0.9728796482086182,-0.21734648942947388,-0.07915537059307098,0,1.0274418592453003,-2.6992135047912598,-0.282674640417099,1],[7,-0.2792038023471832,-0.9600947499275208,-0.016218464821577072,0,0.9215372204780579,-0.2631678879261017,-0.28550320863723755,0,0.2698420286178589,-0.0946594700217247,0.9582404494285583,0,1.9568711519241333,-2.585658073425293,0.9900535345077515,1],[7,-0.44193798303604126,-0.8947588205337524,-0.06401024758815765,0,0.09054563194513321,0.026497839018702507,-0.9955399036407471,0,0.8924641013145447,-0.44576263427734375,0.06930612027645111,0,0.7459321618080139,-2.8266870975494385,-2.336516857147217,1],[7,0.6165080666542053,-0.5974142551422119,0.5128491520881653,0,0.015162336640059948,-0.6422328948974609,-0.766359806060791,0,0.7872025966644287,0.4802428185939789,-0.38688361644744873,0,2.843740224838257,-2.145338773727417,-1.2546377182006836,1],[7,0.616509735584259,-0.4966290295124054,0.6109628677368164,0,0.015161525458097458,-0.7683441042900085,-0.6398577690124512,0,0.7872014045715332,0.4037415087223053,-0.46616190671920776,0,2.8212273120880127,-2.41294002532959,-0.838688850402832,1],[7,0.6165082454681396,-0.6756591200828552,0.4042308032512665,0,0.015162548050284386,-0.5031239986419678,-0.8640815615653992,0,0.7872025966644287,0.5388423204421997,-0.2999354302883148,0,2.8144545555114746,-2.074246406555176,-1.6475930213928223,1],[7,0.6165082454681396,-0.6756591796875,0.4042307138442993,0,0.015162387862801552,-0.5031240582466125,-0.8640815615653992,0,0.7872025966644287,0.5388422012329102,-0.299935519695282,0,2.843740463256836,-2.1369235515594482,-1.6475930213928223,1],[7,-0.07666491717100143,-0.9883203506469727,0.13170066475868225,0,0.07414816319942474,-0.13737502694129944,-0.9877399802207947,0,0.9942957162857056,-0.06595965474843979,0.08381401747465134,0,1.6677911281585693,-2.900045156478882,-1.7957395315170288,1],[7,-0.07666493207216263,-0.9748040437698364,0.2094746083021164,0,0.07414811849594116,-0.2150852382183075,-0.973776638507843,0,0.9942958950996399,-0.05912236124277115,0.08876940608024597,0,1.667781114578247,-3.1572468280792236,-1.5508283376693726,1],[7,-0.07666492462158203,-0.9922131896018982,-0.09816098213195801,0,0.07414808124303818,0.09250447899103165,-0.9929477572441101,0,0.9942958950996399,-0.08340271562337875,0.06647886335849762,0,1.6679294109344482,-2.654176712036133,-2.4796242713928223,1],[7,-0.07666493207216263,-0.9922131896018982,-0.0981607660651207,0,0.07414807379245758,0.09250426292419434,-0.9929478168487549,0,0.9942958950996399,-0.08340270817279816,0.06647887080907822,0,1.6677911281585693,-2.7470591068267822,-2.479623556137085,1],[7,-0.09564509987831116,-0.9888801574707031,0.11387576162815094,0,0.07524824887514114,-0.12125568091869354,-0.9897650480270386,0,0.9925670623779297,-0.08609722554683685,0.08600904047489166,0,1.7654372453689575,-2.920966625213623,-1.8363755941390991,1],[7,-0.09564512223005295,-0.9752488732337952,0.19935332238674164,0,0.0752481147646904,-0.20678219199180603,-0.9754893183708191,0,0.9925671219825745,-0.07829982787370682,0.09316336363554001,0,1.765224814414978,-3.1828999519348145,-1.5657844543457031,1],[7,-0.09564509987831116,-0.9241489768028259,0.3698660731315613,0,0.07524814456701279,-0.37721890211105347,-0.9230624437332153,0,0.9925671815872192,-0.06045464426279068,0.1056196466088295,0,1.7651996612548828,-3.5356788635253906,-0.9512601494789124,1],[7,-0.09564508497714996,-0.9241487979888916,0.3698660731315613,0,0.07524814456701279,-0.3772188425064087,-0.9230623841285706,0,0.9925671219825745,-0.060454629361629486,0.1056196540594101,0,1.765437126159668,-3.6109626293182373,-0.951259970664978,1],[7,-0.25391504168510437,-0.9597557187080383,0.11998356878757477,0,0.08340935409069061,-0.14531435072422028,-0.9858635663986206,0,0.9636232256889343,-0.24031782150268555,0.1169501394033432,0,1.462388515472412,-3.1891746520996094,-1.7569042444229126,1],[7,-0.25391513109207153,-0.9590888023376465,0.12520329654216766,0,0.08340956270694733,-0.15067581832408905,-0.9850582480430603,0,0.9636231660842896,-0.23967808485031128,0.11825606971979141,0,1.4628067016601562,-3.3063533306121826,-1.7389408349990845,1],[7,-0.2539151608943939,-0.966454267501831,-0.038641348481178284,0,0.08340957760810852,0.017922736704349518,-0.996354341506958,0,0.9636231660842896,-0.2562125623226166,0.0760607048869133,0,1.463200330734253,-3.065833568572998,-2.2898550033569336,1],[7,-0.25391513109207153,-0.9664542078971863,-0.03864135965704918,0,0.08340956270694733,0.01792275346815586,-0.9963542222976685,0,0.9636231064796448,-0.2562125027179718,0.07606068253517151,0,1.4623881578445435,-3.1466805934906006,-2.2898547649383545,1],[7,-0.9899576902389526,0.004740172531455755,-0.14128686487674713,0,5.091251509270478e-8,-0.9994377493858337,-0.033532727509737015,0,-0.1413637399673462,-0.0331953726708889,0.9894194602966309,0,-0.006723107770085335,-3.0585010051727295,1.0909640789031982,1],[7,-0.9535434246063232,-0.2627451419830322,-0.14737889170646667,0,0.2732219994068146,-0.9603385329246521,-0.05567329749464989,0,-0.12690339982509613,-0.09335234761238098,0.9875307083129883,0,0.984821617603302,-3.514019012451172,1.0102704763412476,1],[7,-0.9554410576820374,-0.047655463218688965,0.29131677746772766,0,0.24546906352043152,-0.6764082312583923,0.6944299340248108,0,0.16395315527915955,0.7349985837936401,0.657961905002594,0,1.2348029613494873,-1.7059630155563354,3.4634666442871094,1],[7,-0.9562349319458008,-0.23296672105789185,-0.17704038321971893,0,-0.18177945911884308,-0.0011450577294453979,0.9833387136459351,0,-0.22928372025489807,0.9725028276443481,-0.041252873837947845,0,-0.8978667259216309,0.8945424556732178,4.061314105987549,1],[7,-0.9562351703643799,-0.2329665869474411,-0.17704036831855774,0,-0.18177945911884308,-0.001145088579505682,0.9833389520645142,0,-0.2292836457490921,0.9725028872489929,-0.04125281423330307,0,-0.8978673815727234,0.6479388475418091,4.061314582824707,1],[7,-0.9899576902389526,0.005168392322957516,-0.14130531251430511,0,-8.33577331604829e-8,-0.9993318915367126,-0.03656969591975212,0,-0.141363725066185,-0.036193206906318665,0.9895486831665039,0,-1.270464301109314,-3.0619823932647705,1.0871086120605469,1],[7,-0.9508094787597656,0.27698683738708496,-0.13874289393424988,0,-0.2732798457145691,-0.9608592987060547,-0.0454898327589035,0,-0.14587515592575073,-0.005335166119039059,0.9895415306091309,0,-2.214611530303955,-3.1538145542144775,1.0578792095184326,1],[7,-0.8689771890640259,-0.15986666083335876,-0.46839889883995056,0,-0.24814432859420776,-0.6782126426696777,0.6918622851371765,0,-0.428188294172287,0.7174765467643738,0.5496324300765991,0,-2.426955223083496,-1.78456449508667,2.9634456634521484,1],[7,-0.9818673729896545,-0.045715607702732086,0.18398615717887878,0,0.18423277139663696,-0.001206189626827836,0.9828833937644958,0,-0.044699929654598236,0.9992063045501709,0.00960420724004507,0,-0.33848440647125244,1.0220314264297485,4.2929205894470215,1],[7,-0.9818671345710754,-0.04571555554866791,0.18398752808570862,0,0.1842341423034668,-0.0012061644811183214,0.9828831553459167,0,-0.04469987004995346,0.9992063045501709,0.009604234248399734,0,-0.33846840262413025,0.7827358245849609,4.292912483215332,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[7,"Skin-8",2025074401,["Armature/mixamorig:Hips","Armature/mixamorig:Hips/mixamorig:Spine","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head/mixamorig:HeadTop_End","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3/mixamorig:LeftHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3/mixamorig:LeftHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3/mixamorig:LeftHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3/mixamorig:LeftHandRing4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3/mixamorig:RightHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3/mixamorig:RightHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3/mixamorig:RightHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3/mixamorig:RightHandRing4","Armature/mixamorig:Hips/mixamorig:LeftUpLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase/mixamorig:LeftToe_End","Armature/mixamorig:Hips/mixamorig:RightUpLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase/mixamorig:RightToe_End"],[[[7,0.9959316849708557,-0.00043224453111179173,-0.09010791778564453,0,-0.0901089608669281,-0.0047773513942956924,-0.9959203004837036,0,3.902588474602453e-9,0.999988317489624,-0.004796865861862898,0,0.6722328066825867,2.877753973007202,1.3026719093322754,1],[7,0.9959316849708557,0.015086078085005283,-0.08883712440729141,0,-0.0901089608669281,0.1667393445968628,-0.9818747639656067,0,4.148009935533992e-9,0.9858855605125427,0.1674204021692276,0,0.6722328066825867,2.3610517978668213,1.7786232233047485,1],[7,0.9959316849708557,0.015086074359714985,-0.08883712440729141,0,-0.0901089608669281,0.1667392998933792,-0.9818747639656067,0,3.848064977773902e-9,0.9858855605125427,0.16742035746574402,0,0.6722328066825867,2.0699820518493652,1.778623104095459,1],[7,0.9959316849708557,0.015086074359714985,-0.0888371393084526,0,-0.0901089683175087,0.1667392998933792,-0.981874942779541,0,3.6446918816324114e-9,0.985885739326477,0.16742035746574402,0,0.6722328066825867,1.7373300790786743,1.778623342514038,1],[7,0.9959316849708557,-0.00043224249384365976,-0.09010791778564453,0,-0.0901089608669281,-0.004777329042553902,-0.9959203004837036,0,3.913081858542e-9,0.9999884366989136,-0.0047968425787985325,0,0.6722328066825867,1.6489338874816895,1.5174164772033691,1],[7,0.9959316849708557,-0.0004322445602156222,-0.09010791778564453,0,-0.0901089608669281,-0.00477735185995698,-0.9959203004837036,0,3.926126979081346e-9,0.9999884366989136,-0.0047968653962016106,0,0.6722328066825867,1.175086259841919,1.4905118942260742,1],[7,0.9959316849708557,-0.0004322445602156222,-0.09010791778564453,0,-0.0901089608669281,-0.00477735185995698,-0.9959203004837036,0,3.926126979081346e-9,0.9999884366989136,-0.0047968653962016106,0,0.6722328066825867,-2.0805604457855225,1.3056597709655762,1],[7,0.052803076803684235,0.9829844236373901,-0.1759338676929474,0,0.9846462607383728,-0.08060460537672043,-0.15483494102954865,0,-0.16638143360614777,-0.16505691409111023,-0.9721487164497375,0,-1.8001149892807007,-0.001497681369073689,-1.4427798986434937,1],[7,0.10453008115291595,0.7213431596755981,-0.6846438050270081,0,0.9843584299087524,0.02312326990067959,0.17465269565582275,0,0.14181575179100037,-0.692191481590271,-0.7076432704925537,0,-1.2668722867965698,-1.732642650604248,-1.1441785097122192,1],[7,-0.22640490531921387,0.9572820663452148,-0.17986389994621277,0,0.2574740946292877,-0.11927232891321182,-0.9588956236839294,0,-0.9393867254257202,-0.26340898871421814,-0.21947158873081207,0,-2.2208566665649414,-1.3282620906829834,1.1320698261260986,1],[7,-0.18758231401443481,0.9822443723678589,0.0028946134261786938,0,0.9786177277565002,0.1871412843465805,-0.08535163104534149,0,-0.08437786251306534,-0.013177739456295967,-0.9963465332984924,0,-1.3466356992721558,-1.6760525703430176,-2.1775827407836914,1],[7,0.7340289354324341,0.45327144861221313,-0.5057135820388794,0,0.6768178939819336,-0.5494988560676575,0.4898657202720642,0,-0.05584687739610672,-0.7018515467643738,-0.7101304531097412,0,-2.1019318103790283,-1.5799319744110107,-1.637266993522644,1],[7,0.7340287566184998,0.49257034063339233,-0.4675208330154419,0,0.6768178343772888,-0.5872067809104919,0.4439656436443329,0,-0.05584709346294403,-0.6423101425170898,-0.7644073963165283,0,-2.07562518119812,-1.5398424863815308,-1.7671743631362915,1],[7,0.7340274453163147,0.6386683583259583,-0.2308809459209442,0,0.6768192648887634,-0.7159256935119629,0.17136475443840027,0,-0.055848367512226105,-0.282051146030426,-0.9577723741531372,0,-2.080373525619507,-0.7861626148223877,-2.272871494293213,1],[7,0.7340275049209595,0.6386685371398926,-0.23088090121746063,0,0.6768193244934082,-0.7159258723258972,0.1713646501302719,0,-0.055848393589258194,-0.28205108642578125,-0.9577724933624268,0,-2.101935863494873,-0.8241400122642517,-2.272871971130371,1],[7,0.1351616382598877,0.9782993197441101,-0.1570391207933426,0,0.987241268157959,-0.14643602073192596,-0.0625397115945816,0,-0.08417876064777374,-0.1465824991464615,-0.9856103658676147,0,-1.721842646598816,-1.6578164100646973,-1.9302946329116821,1],[7,0.1351615935564041,0.9759941101074219,-0.1707802414894104,0,0.9872412085533142,-0.14730089902877808,-0.06047436594963074,0,-0.08417875319719315,-0.16042743623256683,-0.9834513664245605,0,-1.7217227220535278,-1.8109372854232788,-1.9050170183181763,1],[7,0.1351616531610489,0.9807491898536682,0.1409318745136261,0,0.9872412085533142,-0.1212194561958313,-0.10325019806623459,0,-0.0841788798570633,0.15308921039104462,-0.9846204519271851,0,-1.7216624021530151,-1.2379196882247925,-2.408895492553711,1],[7,0.1351616531610489,0.9807491898536682,0.1409319043159485,0,0.9872412085533142,-0.1212194487452507,-0.10325020551681519,0,-0.08417888730764389,0.1530892550945282,-0.9846204519271851,0,-1.721842885017395,-1.3146953582763672,-2.408895254135132,1],[7,0.07907763868570328,0.9894121885299683,-0.12169639021158218,0,0.9932501912117004,-0.0885930210351944,-0.07486776262521744,0,-0.0848565325140953,-0.11495460569858551,-0.9897398352622986,0,-1.7944179773330688,-1.683440089225769,-1.969910740852356,1],[7,0.07907773554325104,0.979602575302124,-0.1847301721572876,0,0.9932501912117004,-0.09320024400949478,-0.06904791295528412,0,-0.08485642075538635,-0.17802312970161438,-0.980360746383667,0,-1.794408917427063,-1.9321006536483765,-1.8501217365264893,1],[7,0.07907786965370178,0.9675877094268799,-0.23983457684516907,0,0.9932501912117004,-0.09695608913898468,-0.0636664628982544,0,-0.08485632389783859,-0.2331811487674713,-0.9687238931655884,0,-1.7944104671478271,-2.1547579765319824,-1.7310324907302856,1],[7,0.07907786965370178,0.9675876498222351,-0.23983460664749146,0,0.9932501912117004,-0.09695608168840408,-0.0636664405465126,0,-0.0848563015460968,-0.2331811785697937,-0.9687238931655884,0,-1.7944179773330688,-2.2365400791168213,-1.7310327291488647,1],[7,0.02404683642089367,0.9994670152664185,-0.02206444926559925,0,0.9960688352584839,-0.02583564631640911,-0.08473288267850876,0,-0.08525779843330383,-0.019940149039030075,-0.996159553527832,0,-1.8441181182861328,-1.598857045173645,-2.1410040855407715,1],[7,0.024046815931797028,0.9939393401145935,-0.10726413875818253,0,0.9960686564445496,-0.03297128528356552,-0.08221938461065292,0,-0.08525774627923965,-0.10486532002687454,-0.9908249378204346,0,-1.843982458114624,-1.8643345832824707,-1.989182472229004,1],[7,0.02404686249792576,0.9040917158126831,-0.4266608655452728,0,0.9960687160491943,-0.05806475132703781,-0.0668998658657074,0,-0.08525758981704712,-0.4233747124671936,-0.9019339084625244,0,-1.8439253568649292,-2.5050923824310303,-1.2374491691589355,1],[7,0.024046871811151505,0.9040916562080383,-0.4266608655452728,0,0.9960687160491943,-0.05806476250290871,-0.066899873316288,0,-0.08525758981704712,-0.4233746826648712,-0.9019339680671692,0,-1.8441174030303955,-2.5659377574920654,-1.237449049949646,1],[7,-0.10988230258226395,-0.9828417897224426,0.14814607799053192,0,-0.9799301624298096,0.08218201249837875,-0.181611567735672,0,0.1663205623626709,-0.1651287078857422,-0.9721469879150391,0,1.7621454000473022,-1.304692029953003,-1.2280595302581787,1],[7,-0.04541023448109627,-0.7001205086708069,0.7125789523124695,0,-0.9755098819732666,0.1847536861896515,0.11935766041278839,0,-0.21521636843681335,-0.6897077560424805,-0.6913644671440125,0,1.1639641523361206,-2.735266923904419,-0.27970805764198303,1],[7,-0.2653103470802307,-0.9635854363441467,0.03335798531770706,0,-0.2882845103740692,0.04626509174704552,-0.9564262628555298,0,0.920055627822876,-0.26336634159088135,-0.29006141424179077,0,1.9854283332824707,-2.6107678413391113,1.1260719299316406,1],[7,-0.39535027742385864,-0.9165736436843872,-0.059919487684965134,0,-0.9144947528839111,0.3988831341266632,-0.06775868684053421,0,0.08600670844316483,0.028007643297314644,-0.9959008097648621,0,0.8645623922348022,-2.9019010066986084,-2.3217930793762207,1],[7,0.6562888026237488,-0.5715674757957458,0.49253979325294495,0,-0.7544167041778564,-0.5073460340499878,0.41647961735725403,0,0.011841908097267151,-0.6449111104011536,-0.7641658782958984,0,2.9627773761749268,-2.082428455352783,-1.2972925901412964,1],[7,0.6562904715538025,-0.47480830550193787,0.5863785147666931,0,-0.7544153928756714,-0.4251462519168854,0.5001081824302673,0,0.011841130442917347,-0.7705891728401184,-0.6372222900390625,0,2.9402642250061035,-2.3586227893829346,-0.891856849193573,1],[7,0.6562889814376831,-0.6467453837394714,0.3885936141014099,0,-0.7544166445732117,-0.5705674290657043,0.32451218366622925,0,0.011842107400298119,-0.5061351656913757,-0.8623729944229126,0,2.9334917068481445,-2.005019426345825,-1.6789737939834595,1],[7,0.6562889814376831,-0.6467454433441162,0.38859352469444275,0,-0.7544166445732117,-0.5705674886703491,0.3245123326778412,0,0.011841950938105583,-0.5061352252960205,-0.8623729944229126,0,2.962777853012085,-2.0676963329315186,-1.6789737939834595,1],[7,-0.025303496047854424,-0.9903473854064941,0.13627582788467407,0,-0.9972693920135498,0.015546862035989761,-0.07218902558088303,0,0.06937354803085327,-0.13773038983345032,-0.988037109375,0,1.8059052228927612,-2.9222612380981445,-1.7762991189956665,1],[7,-0.025303492322564125,-0.976462721824646,0.21419577300548553,0,-0.9972695708274841,0.009787225164473057,-0.07319264858961105,0,0.06937350332736969,-0.21546298265457153,-0.9740447402000427,0,1.8058950901031494,-3.1778552532196045,-1.5296909809112549,1],[7,-0.025303486734628677,-0.9952342510223389,-0.09417170286178589,0,-0.9972695708274841,0.03166744485497475,-0.06670922040939331,0,0.0693734660744667,0.09222661703824997,-0.9933183789253235,0,1.8060436248779297,-2.6802549362182617,-2.4657888412475586,1],[7,-0.025303497910499573,-0.9952342510223389,-0.09417148679494858,0,-0.9972695708274841,0.03166744112968445,-0.06670921295881271,0,0.06937345862388611,0.09222640097141266,-0.9933184385299683,0,1.8059051036834717,-2.773137092590332,-2.465787887573242,1],[7,-0.044348061084747314,-0.9919521808624268,0.11858876049518585,0,-0.996527373790741,0.0355515256524086,-0.07529088109731674,0,0.0704689547419548,-0.12151597440242767,-0.990084707736969,0,1.903037667274475,-2.946113348007202,-1.8168630599975586,1],[7,-0.04434806853532791,-0.9778998494148254,0.20431537926197052,0,-0.9965274333953857,0.028876328840851784,-0.07809461653232574,0,0.07046882063150406,-0.2070692628622055,-0.9757851362228394,0,1.9028253555297852,-3.206256628036499,-1.5441612005233765,1],[7,-0.044348038733005524,-0.9258737564086914,0.3752209544181824,0,-0.9965274930000305,0.014505261555314064,-0.08198907971382141,0,0.07046885043382645,-0.3775540888309479,-0.923302412033081,0,1.90280020236969,-3.5548105239868164,-0.9258225560188293,1],[7,-0.04434803128242493,-0.9258736371994019,0.3752209544181824,0,-0.9965274333953857,0.014505252242088318,-0.08198908716440201,0,0.07046885788440704,-0.3775540292263031,-0.9233023524284363,0,1.903037667274475,-3.630094289779663,-0.9258224368095398,1],[7,-0.20390383899211884,-0.9708117246627808,0.12628287076950073,0,-0.9758253693580627,0.19118227064609528,-0.10589399933815002,0,0.07866008579730988,-0.14482225477695465,-0.9863260984420776,0,1.5936719179153442,-3.2354297637939453,-1.7329847812652588,1],[7,-0.203903928399086,-0.9701103568077087,0.13156265020370483,0,-0.975825309753418,0.19060342013835907,-0.10693277418613434,0,0.07866029441356659,-0.15018624067306519,-0.9855234622955322,0,1.5940901041030884,-3.352477788925171,-1.7147704362869263,1],[7,-0.20390398800373077,-0.9783918857574463,-0.03423558175563812,0,-0.975825309753418,0.20593027770519257,-0.07319170236587524,0,0.07866030931472778,0.018483875319361687,-0.9967300891876221,0,1.5944838523864746,-3.1153786182403564,-2.273824691772461,1],[7,-0.2039039433002472,-0.9783917665481567,-0.03423559293150902,0,-0.9758252501487732,0.2059302181005478,-0.07319168001413345,0,0.07866029441356659,0.01848389394581318,-0.9967299699783325,0,1.5936716794967651,-3.196225166320801,-2.273824691772461,1],[7,-0.9959316849708557,0.00345345726236701,-0.09004438668489456,0,0.09010891616344452,0.03817013278603554,-0.9952185750007629,0,6.13618595934895e-8,-0.9992652535438538,-0.03832675516605377,0,-0.040362171828746796,-3.057190418243408,1.2281296253204346,1],[7,-0.9589380621910095,-0.2667957842350006,-0.09621617197990417,0,0.07624105364084244,0.08426183462142944,-0.9935408234596252,0,0.27317485213279724,-0.9600622057914734,-0.06046222522854805,0,0.9521056413650513,-3.5251119136810303,1.1472169160842896,1],[7,-0.9458171129226685,-0.009384257718920708,0.32457002997398376,0,-0.21419021487236023,-0.7332382202148438,-0.6453689932823181,0,0.24403971433639526,-0.6799229979515076,0.6914948225021362,0,1.2430671453475952,-1.599420428276062,3.555812120437622,1],[7,-0.96671062707901,-0.1824887990951538,-0.17935769259929657,0,0.18051880598068237,-0.9832084774971008,0.02736728824675083,0,-0.18133693933486938,-0.0059212991036474705,0.9834030866622925,0,-0.9423076510429382,1.0278643369674683,4.047244548797607,1],[7,-0.9667108058929443,-0.18248866498470306,-0.17935769259929657,0,0.1805187314748764,-0.9832085967063904,0.027367232367396355,0,-0.18133695423603058,-0.005921331234276295,0.9834033250808716,0,-0.942308247089386,0.7812606692314148,4.047245025634766,1],[7,-0.9959316849708557,0.003726415801793337,-0.09005482494831085,0,0.09010890871286392,0.04118552431464195,-0.9953340888023376,0,-7.3463375827032e-8,-0.9991449117660522,-0.041364312171936035,0,-1.3041033744812012,-3.061087131500244,1.224310040473938,1],[7,-0.9569501876831055,0.2767580449581146,-0.08749233931303024,0,0.09793927520513535,0.024206330999732018,-0.9951522350311279,0,-0.27322864532470703,-0.9606348872184753,-0.05028257519006729,0,-2.2467238903045654,-3.1450276374816895,1.1951680183410645,1],[7,-0.889801025390625,-0.12234912812709808,-0.43972107768058777,0,0.3839744031429291,-0.7215192914009094,-0.5763611197471619,0,-0.2466973066329956,-0.6817203164100647,0.6889264583587646,0,-2.4977190494537354,-1.6820348501205444,3.030012845993042,1],[7,-0.9829453229904175,0.005890494212508202,0.1838117241859436,0,-0.006887943483889103,-1.0002168416976929,-0.004796488210558891,0,0.1837770640850067,-0.0059822616167366505,0.9829510450363159,0,-0.3595258891582489,1.1617114543914795,4.2910237312316895,1],[7,-0.9829451441764832,0.00589054636657238,0.18381308019161224,0,-0.006887995637953281,-1.0002168416976929,-0.004796442110091448,0,0.18377840518951416,-0.005982233677059412,0.9829508066177368,0,-0.3595098853111267,0.9224157929420471,4.291015625,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[7,"Skin-0",1252759944,["Armature/mixamorig:Hips","Armature/mixamorig:Hips/mixamorig:Spine","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head/mixamorig:HeadTop_End","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3/mixamorig:LeftHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3/mixamorig:LeftHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3/mixamorig:LeftHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3/mixamorig:LeftHandRing4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3/mixamorig:RightHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3/mixamorig:RightHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3/mixamorig:RightHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3/mixamorig:RightHandRing4","Armature/mixamorig:Hips/mixamorig:LeftUpLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase/mixamorig:LeftToe_End","Armature/mixamorig:Hips/mixamorig:RightUpLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase/mixamorig:RightToe_End"],[[[7,0.9999998807907104,-6.730259460852039e-9,-6.752089554140639e-9,0,6.730260349030459e-9,0.9999998807907104,1.6356352716684341e-7,0,6.752089110051429e-9,-1.6356354137769813e-7,1,0,-0.5565804839134216,-0.0015193176222965121,-0.11987722665071487,1],[7,0.9999998807907104,-5.4674291760647975e-9,-7.809886959364576e-9,0,6.730260793119669e-9,0.9850711226463318,0.17214782536029816,0,6.752088665962219e-9,-0.17214787006378174,0.9850711226463318,0,-0.5565804839134216,-0.23034870624542236,-0.11834917217493057,1],[7,0.9999998807907104,-5.4674291760647975e-9,-7.809886959364576e-9,0,6.730260349030459e-9,0.9850711226463318,0.17214778065681458,0,6.752089110051429e-9,-0.17214782536029816,0.9850711226463318,0,-0.5565804839134216,-0.5214186310768127,-0.11834918707609177,1],[7,0.9999998807907104,-5.467430064243217e-9,-7.809887847542996e-9,0,6.730260793119669e-9,0.9850713014602661,0.17214778065681458,0,6.752089554140639e-9,-0.17214782536029816,0.9850713014602661,0,-0.5565804839134216,-0.8540711998939514,-0.1183491125702858,1],[7,0.9999998807907104,-6.730260349030459e-9,-6.752089554140639e-9,0,6.730260793119669e-9,1,1.8678579749575874e-7,0,6.752089110051429e-9,-1.867858401283229e-7,1,0,-0.5565804839134216,-1.2303396463394165,0.09486725926399231,1],[7,0.9999998807907104,-6.730260349030459e-9,-6.752089554140639e-9,0,6.730260793119669e-9,1,1.6384176149131235e-7,0,6.752089110051429e-9,-1.638418041238765e-7,1,0,-0.5565804839134216,-1.704187273979187,0.06796275824308395,1],[7,0.9999998807907104,-6.730260349030459e-9,-6.752089554140639e-9,0,6.730260793119669e-9,1,1.6384177570216707e-7,0,6.752089110051429e-9,-1.6384181833473122e-7,1,0,-0.5565804839134216,-4.959834098815918,-0.11688944697380066,1],[7,-0.03613718971610069,0.9862488508224487,-0.16126616299152374,0,-0.17110653221607208,-0.16509483754634857,-0.9713217616081238,0,-0.9845893383026123,-0.0075071463361382484,0.17471981048583984,0,0.1375797837972641,-0.7273809909820557,1.3035399913787842,1],[7,0.015405332669615746,0.7163251638412476,-0.6975964903831482,0,0.13706614077091217,-0.6926059126853943,-0.7081736922264099,0,-0.990442156791687,-0.08470721542835236,-0.10885375738143921,0,-0.2715013325214386,-0.4981707036495209,1.906913161277771,1],[7,-0.2486846148967743,0.9641353487968445,-0.09272713214159012,0,-0.9405081272125244,-0.263249933719635,-0.21481019258499146,0,-0.23151659965515137,0.03379064053297043,0.9722438454627991,0,1.1220545768737793,-1.8031046390533447,0.48144716024398804,1],[7,-0.2750014662742615,0.9613854885101318,0.010573790408670902,0,-0.08897119015455246,-0.014496237970888615,-0.9959286451339722,0,-0.9573181867599487,-0.2748226821422577,0.08952213078737259,0,0.6092938780784607,-2.4247286319732666,0.5496255159378052,1],[7,0.6700555682182312,0.5009423494338989,-0.547797679901123,0,-0.05939707159996033,-0.6994142532348633,-0.7122440338134766,0,-0.7399308085441589,0.5097807049751282,-0.4388920068740845,0,-1.7016971111297607,-0.9068792462348938,1.7109649181365967,1],[7,0.6700554490089417,0.5434792041778564,-0.5056242346763611,0,-0.059397224336862564,-0.6397102475166321,-0.7663175463676453,0,-0.7399307489395142,0.543507993221283,-0.3963603377342224,0,-1.6753896474838257,-1.1389425992965698,1.6244233846664429,1],[7,0.670054018497467,0.7005816102027893,-0.24538323283195496,0,-0.05939853563904762,-0.27890363335609436,-0.9584802985191345,0,-0.7399320602416992,0.6568090915679932,-0.14526702463626862,0,-1.6801307201385498,-1.7783498764038086,0.9950350522994995,1],[7,0.670054018497467,0.7005817890167236,-0.24538318812847137,0,-0.05939856916666031,-0.2789035737514496,-0.9584804177284241,0,-0.7399321794509888,0.6568092107772827,-0.14526692032814026,0,-1.7016929388046265,-1.8163278102874756,0.9950347542762756,1],[7,0.045652516186237335,0.987514853477478,-0.15076491236686707,0,-0.08895278722047806,-0.14630410075187683,-0.985232412815094,0,-0.994989275932312,0.05838928371667862,0.08116307109594345,0,-0.10640091449022293,-2.533099889755249,0.9762625098228455,1],[7,0.04565247520804405,0.985296905040741,-0.16463623940944672,0,-0.08895277976989746,-0.16014376282691956,-0.9830774068832397,0,-0.9949892163276672,0.05952475592494011,0.08033397048711777,0,-0.10628119111061096,-2.6452624797821045,1.0135600566864014,1],[7,0.045652538537979126,0.9876825213432312,0.1496623456478119,0,-0.08895290642976761,0.15324266254901886,-0.9841768145561218,0,-0.9949892163276672,0.03161727264523506,0.09485317766666412,0,-0.10622052848339081,-2.9378018379211426,0.10597864538431168,1],[7,0.04565253481268883,0.9876825213432312,0.14966237545013428,0,-0.08895290642976761,0.15324269235134125,-0.9841768145561218,0,-0.9949892163276672,0.03161726891994476,0.09485318511724472,0,-0.10640089213848114,-3.014577865600586,0.10597890615463257,1],[7,-0.010744803585112095,0.9933703541755676,-0.11445507407188416,0,-0.08963502198457718,-0.11495770514011383,-0.9893181920051575,0,-0.9959169030189514,-0.0003708472358994186,0.09027599543333054,0,-0.1063905879855156,-2.572584629058838,0.8908292651176453,1],[7,-0.010744712315499783,0.9840157628059387,-0.1777568757534027,0,-0.08963491022586823,-0.17799927294254303,-0.9799397587776184,0,-0.9959169030189514,0.005404050461947918,0.09011473506689072,0,-0.10638192296028137,-2.636451244354248,1.0616304874420166,1],[7,-0.010744578205049038,0.9723881483078003,-0.23312200605869293,0,-0.08963481336832047,-0.23313352465629578,-0.9683049321174622,0,-0.9959169030189514,0.010491820052266121,0.0896647572517395,0,-0.10638405382633209,-2.6933114528656006,1.2158936262130737,1],[7,-0.010744577273726463,0.9723881483078003,-0.23312203586101532,0,-0.08963479101657867,-0.23313355445861816,-0.9683049321174622,0,-0.9959169030189514,0.010491818189620972,0.08966473489999771,0,-0.10639142990112305,-2.7750935554504395,1.2158935070037842,1],[7,-0.06580571830272675,0.9977293014526367,-0.01433949451893568,0,-0.09002594649791718,-0.02024850994348526,-0.9957337379455566,0,-0.9937633275985718,-0.06423403322696686,0.09115401655435562,0,-0.09036906808614731,-2.6752028465270996,0.6139355897903442,1],[7,-0.06580572575330734,0.9928669929504395,-0.09941907972097397,0,-0.090025894343853,-0.10513623058795929,-0.9903743863105774,0,-0.9937631487846375,-0.05622202157974243,0.09630235284566879,0,-0.09023378044366837,-2.701688051223755,0.8475492000579834,1],[7,-0.06580568104982376,0.905646026134491,-0.4188969135284424,0,-0.09002573788166046,-0.4234832525253296,-0.9014195203781128,0,-0.9937632083892822,-0.02160702459514141,0.10939909517765045,0,-0.09017721563577652,-2.367901086807251,1.7171050310134888,1],[7,-0.06580567359924316,0.9056459665298462,-0.4188969135284424,0,-0.09002573788166046,-0.4234832227230072,-0.9014195799827576,0,-0.9937632083892822,-0.021607015281915665,0.10939910262823105,0,-0.09036929160356522,-2.428746461868286,1.7171052694320679,1],[7,-0.02113480679690838,-0.9862489104270935,0.16390825808048248,0,0.17104779183864594,-0.16509461402893066,-0.9713321924209595,0,0.9850360751152039,0.007507226895540953,0.1721850037574768,0,-0.10563915222883224,0.37189704179763794,1.1223175525665283,1],[7,0.042676690965890884,-0.7139204740524292,0.6989250183105469,0,-0.2105337679386139,-0.6902799010276794,-0.6922348737716675,0,0.976654589176178,-0.11760501563549042,-0.1797632873058319,0,0.3283679783344269,0.29681164026260376,1.1102993488311768,1],[7,-0.23825404047966003,-0.9638345241546631,0.1194048672914505,0,0.9215371012687683,-0.2631678581237793,-0.28550317883491516,0,0.30660152435302734,0.04201372712850571,0.9509102702140808,0,-0.8113152384757996,-0.7284293174743652,0.4486711919307709,1],[7,-0.31133782863616943,-0.948788046836853,-0.05357006564736366,0,0.09054563194513321,0.02649783529341221,-0.9955397844314575,0,0.9459757804870605,-0.3147996962070465,0.07765886932611465,0,-0.35926389694213867,-1.3644939661026,0.49999240040779114,1],[7,0.7215988039970398,-0.5235258936882019,0.4530075788497925,0,0.015162304043769836,-0.6422328352928162,-0.7663597464561462,0,0.6921454668045044,0.5598728060722351,-0.45549672842025757,0,1.047800064086914,-0.3863951563835144,1.0005714893341064,1],[7,0.7216002941131592,-0.43456730246543884,0.5389289259910583,0,0.015161546878516674,-0.7683439254760742,-0.6398577094078064,0,0.692143976688385,0.4698924720287323,-0.5478485822677612,0,1.0252896547317505,-0.28079310059547424,1.067566990852356,1],[7,0.7215989828109741,-0.5927011966705322,0.3577713668346405,0,0.015162528492510319,-0.5031238794326782,-0.8640814423561096,0,0.6921454071998596,0.6289448142051697,-0.35406693816185,0,1.0185136795043945,-0.7227734327316284,0.87299644947052,1],[7,0.7215989232063293,-0.5927013158798218,0.35777127742767334,0,0.015162377618253231,-0.503123939037323,-0.8640814423561096,0,0.6921454071998596,0.6289447546005249,-0.35406702756881714,0,1.047800064086914,-0.7854501605033875,0.8729965686798096,1],[7,0.06466235965490341,-0.9877195954322815,0.14222633838653564,0,0.07414816319942474,-0.13737501204013824,-0.9877398610115051,0,0.9951484203338623,0.07441543787717819,0.06435464322566986,0,0.09730721265077591,-1.418857455253601,0.8013570308685303,1],[7,0.0646623745560646,-0.9733724594116211,0.21991974115371704,0,0.07414811849594116,-0.2150851935148239,-0.9737765192985535,0,0.9951485991477966,0.07927335053682327,0.058265846222639084,0,0.09729711711406708,-1.475243330001831,0.9209515452384949,1],[7,0.0646623820066452,-0.9940391778945923,-0.0877775177359581,0,0.07414808124303818,0.09250447154045105,-0.9929476380348206,0,0.9951485991477966,0.0576978400349617,0.0796876847743988,0,0.0974455401301384,-1.8071900606155396,0.3876816928386688,1],[7,0.0646623745560646,-0.9940391778945923,-0.08777730166912079,0,0.07414807379245758,0.09250425547361374,-0.9929476976394653,0,0.9951485991477966,0.0576978474855423,0.07968766242265701,0,0.0973072350025177,-1.900071620941162,0.3876824378967285,1],[7,0.04562840610742569,-0.9911205172538757,0.12489072978496552,0,0.07524824887514114,-0.12125565111637115,-0.989764928817749,0,0.9961202144622803,0.054559219628572464,0.06904742121696472,0,0.21327902376651764,-1.4566963911056519,0.7812501788139343,1],[7,0.04562839865684509,-0.9765238165855408,0.21052125096321106,0,0.0752481147646904,-0.20678214728832245,-0.9754891991615295,0,0.996120274066925,0.06035134568810463,0.0640464723110199,0,0.21306709945201874,-1.4967615604400635,0.9147385954856873,1],[7,0.04562843590974808,-0.923414409160614,0.3810825049877167,0,0.07524814456701279,-0.3772188127040863,-0.9230623245239258,0,0.9961203336715698,0.07079364359378815,0.05227334052324295,0,0.21304161846637726,-1.4346977472305298,1.1892858743667603,1],[7,0.04562843590974808,-0.9234142899513245,0.3810825049877167,0,0.07524814456701279,-0.3772187829017639,-0.923062264919281,0,0.996120274066925,0.07079363614320755,0.05227334424853325,0,0.21327915787696838,-1.5099819898605347,1.1892857551574707,1],[7,-0.11514373123645782,-0.984089732170105,0.13531114161014557,0,0.08340934664011002,-0.1453143209218979,-0.985863447189331,0,0.9898406863212585,-0.10222980380058289,0.09881436824798584,0,0.08690701425075531,-1.4623403549194336,0.7987455725669861,1],[7,-0.11514383554458618,-0.9833390712738037,0.14066307246685028,0,0.08340955525636673,-0.15067578852176666,-0.9850581288337708,0,0.9898406267166138,-0.10169076919555664,0.09936930984258652,0,0.08732493221759796,-1.5656404495239258,0.8072753548622131,1],[7,-0.11514388024806976,-0.992967963218689,-0.027501078322529793,0,0.08340957015752792,0.017922740429639816,-0.9963542222976685,0,0.9898406267166138,-0.11701798439025879,0.08075937628746033,0,0.08771857619285583,-1.7803468704223633,0.5138612985610962,1],[7,-0.11514385044574738,-0.9929678440093994,-0.027501091361045837,0,0.08340955525636673,0.01792275905609131,-0.9963541030883789,0,0.989840567111969,-0.1170179545879364,0.08075934648513794,0,0.08690652251243591,-1.8611937761306763,0.5138611793518066,1],[7,-0.9999998807907104,-6.025582877100533e-8,3.514457702635809e-8,0,5.9043493649824086e-8,-0.9994376301765442,-0.03353272005915642,0,3.7144669562394483e-8,-0.03353210166096687,0.9994562864303589,0,1.188450813293457,-0.13183462619781494,-0.0970957949757576,1],[7,-0.961907148361206,-0.27330321073532104,-0.006297821179032326,0,0.2732219994068146,-0.9603384137153625,-0.05567328631877899,0,0.00916748121380806,-0.05527222901582718,0.9984476566314697,0,1.334388017654419,-0.34556859731674194,-0.10508613288402557,1],[7,-0.9226691126823425,0.056725259870290756,0.38140320777893066,0,0.24546903371810913,-0.6764081716537476,0.694429874420166,0,0.29737141728401184,0.7343542575836182,0.6101728081703186,0,1.247057318687439,-0.7662156224250793,0.2196846902370453,1],[7,-0.9790444374084473,-0.0931505411863327,-0.18109411001205444,0,-0.1817794293165207,-0.0011450527235865593,0.9833385944366455,0,-0.09180422127246857,0.9956697225570679,-0.015811512246727943,0,0.9147440791130066,-0.27076297998428345,1.4609671831130981,1],[7,-0.9790446758270264,-0.09315039217472076,-0.18109409511089325,0,-0.1817794293165207,-0.0011450840393081307,0.9833388328552246,0,-0.09180410206317902,0.9956697821617126,-0.015811452642083168,0,0.9147434830665588,-0.5173666477203369,1.460966944694519,1],[7,-0.9999998807907104,7.419006919917592e-8,4.6371216200213894e-8,0,-7.583535222011051e-8,-0.9993317723274231,-0.036569688469171524,0,4.3615969502752705e-8,-0.036560364067554474,0.999586820602417,0,-0.07528993487358093,-0.1317286193370819,-0.09235689043998718,1],[7,-0.9618825316429138,0.273451030254364,0.002535718958824873,0,-0.2732797861099243,-0.9608591794967651,-0.045489825308322906,0,-0.010000213980674744,-0.04443749412894249,0.9992175102233887,0,-0.2636767327785492,-0.6512569189071655,-0.09840592741966248,1],[7,-0.9207808375358582,-0.05683604255318642,-0.3859969675540924,0,-0.24814431369304657,-0.678212583065033,0.6918622255325317,0,-0.3010464608669281,0.7328708171844482,0.6103274822235107,0,-0.22352224588394165,-0.7019787430763245,0.6440500617027283,1],[7,-0.9783260226249695,0.09599503874778748,0.18349620699882507,0,0.18423277139663696,-0.0012061888119205832,0.9828832745552063,0,0.09454944729804993,0.9956344962120056,-0.01650122180581093,0,0.1776965856552124,-0.3691141903400421,1.2590250968933105,1],[7,-0.9783257842063904,0.09599509090185165,0.1834975630044937,0,0.1842341274023056,-0.0012061629677191377,0.9828830361366272,0,0.09454946219921112,0.9956344962120056,-0.01650138758122921,0,0.1777084320783615,-0.6084100604057312,1.2590163946151733,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[3,".bin",894019168,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":3384,"length":624,"count":156,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3384,"count":47,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,5]]},"minPosition",8,[1,-1.9258553981781006,-0.6680067181587219,-2.5455236434936523],"maxPosition",8,[1,0.5233710408210754,0.9510850310325623,0.13220934569835663]]],-1],0,0,[],[],[]],[[[3,".bin",483633097,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":3096,"length":624,"count":156,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3096,"count":43,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,4,5]]},"minPosition",8,[1,-6.745294570922852,-0.8436439037322998,-7.709579944610596],"maxPosition",8,[1,1.033407211303711,1.0435036420822144,1.241904616355896]]],-1],0,0,[],[],[]],[[[3,".bin",2832592977,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":4464,"length":264,"count":132,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":22152,"length":1974,"count":987,"stride":2}},{"primitiveMode":7,"jointMapIndex":2,"vertexBundelIndices":[2],"indexView":{"offset":40038,"length":1920,"count":960,"stride":2}},{"primitiveMode":7,"jointMapIndex":3,"vertexBundelIndices":[3],"indexView":{"offset":45270,"length":282,"count":141,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":4464,"count":62,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":4728,"length":17424,"count":242,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":24126,"length":15912,"count":221,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":41958,"length":3312,"count":46,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,3,4,7,8,9,10,11,12,15,19,20,23,24,25,27,28,30,35,39,40,43,44,48,49,50,53,54,55],[0,1,2,3,4,27,28,29,30,31,32,33,35,36,37,39,40,41,43,44,47,52,53,54,55],[0,1,2,3,4,7,8,9,10,11,12,13,15,16,17,19,20,21,23,24,27,28,47,48,49,50,52],[0,3,7,8,9,10,27,28,29,30,31,39,43,44,45,49,50]]},"minPosition",8,[1,-1.8800253868103027,-1.2790800333023071,-0.587105929851532],"maxPosition",8,[1,2.9931862354278564,1.2812070846557617,0.8877331018447876]]],-1],0,0,[],[],[]],[[[23],[24,"momo",[[[25,"Momo",-4,[0,"4b/ZjbPORUAIniKCfzkbOe",-3,0]],-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15],4,1,1,1,1,1,1,1,1,1,1,1],[[42,-2,[6,"d3Aqrq/w9cK4U90yTNnpMG"]]],[0,"11qOJKHTNWHaV8U/ZSjwY+",-1,0]],[16,"mixamorig:LeftHand",[-16,-17,-18,-19],[0,"2592e3u9hTiZDOimyFo6At",1,0],[1,-5.700858451973545e-8,0.4467477798461914,-4.5917694535546616e-8],[3,0.041142760964650436,0.6378052119521378,-0.008237092607049665,0.7690539221226801],[1,4.235026751751226,79.2560016247365,2.2816968724809836]],[16,"mixamorig:RightHand",[-20,-21,-22,-23],[0,"649s9SzT1d+4ELJ1yv71k6",1,0],[1,7.731578222092139e-8,0.44688719511032104,-1.3660610420629382e-9],[3,0.021733873130068866,-0.6010050326241692,0.014245896952580274,0.7988226611327474],[1,2.9719482582072154,-73.90793567948747,-0.19276878416422163]],[16,"mixamorig:Hips",[-24,-25,-26],[0,"348pAcJ/pfM75EJ3oqtUgu",1,0],[1,-0.000009862780643743463,1.2987207174301147,0.004004497546702623],[3,2.9671999961933568e-8,-0.000019179178703385217,-0.000007259415723021139,0.9999999997897295],[1,0.0000033842061941753447,-0.002197771964087615,-0.0008318678303866435]],[32,"mixamorig:Spine2",[-27,-28,-29],[0,"67KS4n9mlayaO3KkfOQ+9i",1,0],[1,-1.1230096984716359e-13,0.33265191316604614,-7.105427198782324e-17]],[33,"Armature",1,[4],[0,"0cvjx3WztTkJPSmgTO9Fpq",1,0]],[1,"mixamorig:Spine",4,[-30],[0,"bakPEDSvVRjrLaHsHWEjnc",1,0],[1,2.91038298062124e-13,0.24576416611671448,-0.04294890537858009],[3,-0.08639690062560189,0.000018480275219832224,0.00000888929003309386,0.996260796750404],[1,-9.912713854982883,0.0021977722320424596,0.0008318674154087373]],[17,"mixamorig:Spine1",7,[5],[0,"58LlgvuStQsaZ6sshiotet",1,0],[1,-1.0555034087424489e-13,0.29107019305229187,9.53674295089968e-9]],[1,"mixamorig:Neck",5,[-31],[0,"291I36Xy5ZvYiLFQh1uHmG",1,0],[1,6.27096302403124e-14,0.3742329478263855,-7.629394360719743e-8],[3,0.08639682669410668,-2.282940267235195e-14,-2.3020661014234805e-13,0.996260803372886],[1,9.912705333216374,-3.2714955568549797e-13,-2.6507114350379218e-11]],[17,"mixamorig:Head",9,[-32],[0,"e8dCkpGYZVDaP98G311qOo",1,0],[1,-1.0737282373982082e-13,0.4738472104072571,0.026904532685875893]],[5,"mixamorig:HeadTop_End",10,[[4,"mixamorig:HeadTop_End_end",-33,[0,"18YiIY0i9eyrR5NF6pA/9+",1,0],[1,0,3.260890483856201,0]]],[0,"efDpciW7pcpYzO4hkwv0rL",1,0],[1,7.087916814889003e-14,3.2556471824645996,0.18485219776630402]],[1,"mixamorig:LeftShoulder",5,[-34],[0,"f5oSYoTvdao7DDZYFqMyo8",1,0],[1,0.37598714232444763,0.31490767002105713,-0.013298950158059597],[3,-0.5089081427259967,-0.48945613747788536,0.5188866157192711,-0.48187329432103565],[1,93.23674055024088,91.0096779606918,-0.10879203398728657]],[1,"mixamorig:LeftArm",12,[-35],[0,"26alW4lgdcJb/mR8ilskfh",1,0],[1,-2.1457672971791908e-8,0.7693014740943909,-6.67572024326546e-8],[3,-0.029204898180485595,0.14679363670493806,0.004575385340104427,0.9887253248471972],[1,-3.387840725509867,16.890554385237063,0.027124526991821264]],[1,"mixamorig:LeftForeArm",13,[2],[0,"84AIE2hKdW4qCHaW1Tcy4y",1,0],[1,2.664513942818303e-8,0.517681360244751,3.821914873469723e-8],[3,4.853986769483272e-7,-0.6667171584418495,-3.763956254165409e-7,0.7453108282044804],[1,0.000012699433986052238,-83.62839266809314,-0.0000692311048162364]],[1,"mixamorig:LeftHandThumb1",2,[-36],[0,"967nKAeRZSc7Kj4UiX7a8n",1,0],[1,-0.08600741624832153,0.014905443415045738,0.09098999202251434],[3,0.12593019010927264,0.18685376647533572,0.13244920971418778,0.9652380349007753],[1,11.72072278840178,20.088886446027363,17.622915165836044]],[1,"mixamorig:LeftHandThumb2",15,[-37],[0,"5bLtvCxy5fqaahb1g5eNbB",1,0],[1,-0.026307469233870506,0.09738101810216904,6.19888282926695e-8],[3,-0.00045727426826212006,0.004301764131195849,0.1571880600995032,0.9875592131552204],[1,-0.13595107628078137,0.5207909803351877,18.087020690257827]],[1,"mixamorig:LeftHandThumb3",16,[-38],[0,"55zktto79RN4Em3Yfj9IvZ",1,0],[1,0.004745555110275745,0.09144622832536697,5.7220457705398076e-8],[3,-0.01685859471215759,-0.057733964928671326,0.22976357044710052,0.971386266514689],[1,-0.3988300033440141,-6.708289084234145,26.636267142620966]],[5,"mixamorig:LeftHandThumb4",17,[[4,"mixamorig:LeftHandThumb4_end",-39,[0,"faUXUzJfpXVoX5Jhr+pKUy",1,0],[1,-2.8421708795129297e-16,0.043671637773513794,0]]],[0,"1dMAPa5PhZMY8YRHMp+3xl",1,0],[1,0.02156180329620838,0.03797786310315132,2.1815300499383738e-7]],[1,"mixamorig:LeftHandIndex1",2,[-40],[0,"00ZJIbuRtdoYu+VYV51YCK",1,0],[1,-0.13657821714878082,0.1281147003173828,-0.005056127440184355],[3,-0.036754279905159185,0.008834063904993231,-0.020725546165858366,0.9990703348411976],[1,-4.194287770832825,0.9249363386784858,-2.410682600725938]],[1,"mixamorig:LeftHandIndex2",19,[-41],[0,"dd/IP6QApUMr4diPAzqu+e",1,0],[1,-0.00011967092723352835,0.126153826713562,-1.2341421040673595e-7],[3,4.760954549244873e-7,-0.000005232820399150708,0.00020844256052258625,0.9999999782620448],[1,0.00005468151387236166,-0.0005996484586268833,0.02388575786484055]],[1,"mixamorig:LeftHandIndex3",20,[-42],[0,"68Yw2CkX9UZKeLLsld6t+L",1,0],[1,-0.00006079673767089844,0.1141946092247963,-1.3047596780779713e-7],[3,-9.228407083508699e-8,-0.00014426734215512322,0.0014394089030099616,0.9999989536439204],[1,0.000013221138693708324,-0.016531855868256264,0.16494416703912518]],[5,"mixamorig:LeftHandIndex4",21,[[4,"mixamorig:LeftHandIndex4_end",-43,[0,"4cdw7CDS5VaqJOVr+daYWw",1,0],[1,0,0.07677669823169708,0]]],[0,"43LGiu5wBbM6EC0dIIg+qv",1,0],[1,0.00018042087322100997,0.07677694410085678,-5.499925492813418e-8]],[1,"mixamorig:LeftHandMiddle1",2,[-44],[0,"99XHIcFXJcO74GvjTlx+EW",1,0],[1,0.006879157852381468,0.17217645049095154,-0.012750349007546902],[3,-0.03683248223858872,0.0047370545426864,-0.02013396877934776,0.9991073775463755],[1,-4.213258478854417,0.4577445846028968,-2.3257557204219776]],[1,"mixamorig:LeftHandMiddle2",23,[-45],[0,"b7BHMDGQ1R564VbUe3mrG2",1,0],[1,-0.000009128712008532602,0.12637075781822205,-1.7129350737832283e-7],[3,-1.4787104859646255e-7,-8.64021784840627e-7,0.00004390397585071423,0.9999999990358364],[1,-0.000016940427127237666,-0.0000990088597007873,0.005031025056435415]],[1,"mixamorig:LeftHandMiddle3",24,[-46],[0,"b32QpwMiRVFLmxiZInaZYl",1,0],[1,0.0000017912452676682733,0.12131299078464508,-2.365792184377824e-8],[3,-7.36937351587646e-7,0.000001540610354806666,0.00003462636230062395,0.9999999993990494],[1,-0.0000844529131454717,0.0001765438668121751,0.003967888710120817]],[5,"mixamorig:LeftHandMiddle4",25,[[4,"mixamorig:LeftHandMiddle4_end",-47,[0,"aaYFGX291Ri47MQN1oTgJi",1,0],[1,0,0.08178219944238663,-5.684341759025859e-16]]],[0,"c4gENXhHtfW4a/GA5SQFAV",1,0],[1,0.000007394422027573455,0.08178196847438812,7.12717849182809e-8]],[1,"mixamorig:LeftHandRing1",2,[-48],[0,"eag0SX2r1QM7c5zq3ELq5t",1,0],[1,0.12969885766506195,0.22340700030326843,0.002669032895937562],[3,-0.03697339729253107,-0.002434291352839125,-0.02059313605536043,0.9991010784028127],[1,-4.2462228313667945,-0.3662582943879313,-2.3480217533015226]],[1,"mixamorig:LeftHandRing2",27,[-49],[0,"f2rKaAUyVTl5mwv+ZbUIe9",1,0],[1,-0.0001352873514406383,0.08895015716552734,-1.4787073787658755e-8],[3,5.620850679672223e-7,-0.00004490913528731711,0.0004674484413028811,0.9999998897373981],[1,0.0000668158131686466,-0.005146239624014675,0.053565644657369293]],[1,"mixamorig:LeftHandRing3",28,[-50],[0,"773gAozp1eWLh9XbNVUBi4",1,0],[1,-0.00005673646955983713,0.09778767824172974,1.939013571927717e-8],[3,7.143336360372516e-7,0.00021658178977745516,0.0018691935442459512,0.9999982296020888],[1,0.00003546623085576441,0.02481842220444647,0.21419393979005882]],[5,"mixamorig:LeftHandRing4",29,[[4,"mixamorig:LeftHandRing4_end",-51,[0,"09joHiZmVc8JO0veEyiMzk",1,0],[1,7.105427198782324e-17,0.060845665633678436,0]]],[0,"eazqmvpyZWypNovDj1qnPZ",1,0],[1,0.00019210934988223016,0.06084581837058067,-2.8169714028081216e-7]],[1,"mixamorig:RightShoulder",5,[-52],[0,"edh6cIuUFaQYhTKLnCSPHW",1,0],[1,-0.37598717212677,0.3139137625694275,-0.007609844207763672],[3,0.5138000267487807,-0.4856318252056207,0.5152837651762642,0.48441088365785334],[1,93.38331372654514,-90.15534375404945,0.010475873624158501]],[1,"mixamorig:RightArm",31,[-53],[0,"97YsHNVrRRK6JuFzvc5qU7",1,0],[1,4.887580828949467e-8,0.7693012952804565,-1.0967254837623841e-7],[3,-0.029277904690796278,-0.1834136740503946,0.0040854272522231954,0.982591236350304],[1,-3.2129775396177993,-21.11650653147603,1.0754216268706207]],[1,"mixamorig:RightForeArm",32,[3],[0,"0cwr3fAqdWIpE9y33oJQjM",1,0],[1,1.60048507780175e-8,0.5194254517555237,2.0989828541928546e-8],[3,1.0571905971985963e-7,0.6670265169178509,1.7737411818826683e-7,0.7450339762241701],[1,-0.000004531975703213517,83.6759653766933,0.00002322394591143798]],[1,"mixamorig:RightHandThumb1",3,[-54],[0,"b173I3qapf36q1mf6f+r3k",1,0],[1,0.07548689097166061,0.004909180570393801,0.0709749311208725],[3,0.12451771228940277,-0.21803668714414032,-0.14916372691229837,0.9564023865293599],[1,10.607062400009669,-23.82363007911481,-19.85372093271411]],[1,"mixamorig:RightHandThumb2",34,[-55],[0,"9fMhZ74kdY85yzUI+/TWLd",1,0],[1,0.022513065487146378,0.07987165451049805,3.33786012163273e-8],[3,0.002618488824027133,0.015139019865193937,-0.10327264541798105,0.9945344208734918],[1,0.4879784786394999,1.794842874541228,-11.849234351805258]],[1,"mixamorig:RightHandThumb3",35,[-56],[0,"bbyq5G6NlW37qItUTOTwu1",1,0],[1,0.006773552857339382,0.09976056218147278,-9.53674295089968e-9],[3,-0.006136620117606012,0.03285398050624183,-0.2496433921645638,0.9677608871033162],[1,0.2962684792490186,3.9651129349797847,-28.920359862901243]],[5,"mixamorig:RightHandThumb4",36,[[4,"mixamorig:RightHandThumb4_end",-57,[0,"04+HQjCnpeJb99c6AY1ZZs",1,0],[1,-2.8421708795129297e-16,0.06918110698461533,0]]],[0,"b9xySYR1Rfkojp/cAxefUb",1,0],[1,-0.029286475852131844,0.06267651915550232,-1.5079974957643572e-7]],[1,"mixamorig:RightHandIndex1",3,[-58],[0,"ccghq4XD5Vi5ma1gYOqi9A",1,0],[1,0.12735866010189056,0.10837479680776596,-0.00858828891068697],[3,-0.025905954166214783,-0.014254984691286983,0.0020927279616573045,0.9995605521627329],[1,-2.9652400644691954,-1.6268088784673542,0.2820221149837481]],[1,"mixamorig:RightHandIndex2",38,[-59],[0,"1fXrP1jSdeq7KyJIrXsmIp",1,0],[1,0.00001009855441225227,0.12461893260478973,5.0538801588118076e-8],[3,-3.9771426816269783e-7,-0.000021429391978591056,-0.0006215421508758019,0.9999998066129699],[1,-0.00004710100157197857,-0.0024556571855833056,-0.07122348766211568]],[1,"mixamorig:RightHandIndex3",39,[-60],[0,"57cy4LnTpUAYewuQm/zR23",1,0],[1,-0.00014844507677480578,0.1272805631160736,2.961276948099112e-7],[3,1.6358007138088918e-7,-0.000025279058238283133,0.0013242055654122703,0.9999991229198969],[1,0.000022580872734624647,-0.0028967991360631527,0.1517428240367525]],[5,"mixamorig:RightHandIndex4",40,[[4,"mixamorig:RightHandIndex4_end",-61,[0,"1edj5B4CZaS5yKodzrSiCe",1,0],[1,0,0.09288153052330017,-2.8421708795129297e-16]]],[0,"90paiKf21XvY4ty7RJJYWv",1,0],[1,0.00013829559611622244,0.09288132935762405,3.4291296913124825e-8]],[1,"mixamorig:RightHandMiddle1",3,[-62],[0,"7a7hhT8sdbTY0mrQgQLdwN",1,0],[1,-0.0006110852700658143,0.1813637614250183,-0.009416025131940842],[3,-0.025922075582227495,-0.011749079753846146,0.0029181205488499253,0.9995906610682741],[1,-2.9666933341413824,-1.3372752843730416,0.3691577239054163]],[1,"mixamorig:RightHandMiddle2",42,[-63],[0,"27EyLyxBRaLamgVU8vi6ch",1,0],[1,0.00021203368669375777,0.11387310177087784,-7.338508822840595e-8],[3,5.647413066989392e-7,0.00004493854855217275,-0.0008283581231102,0.9999996559014546],[1,0.00006898035422608543,0.005149637247917567,-0.09492285661079161]],[1,"mixamorig:RightHandMiddle3",43,[-64],[0,"2cAwl2J2dWxaY/rorOt2fS",1,0],[1,0.000025593712052796036,0.12681835889816284,-1.377658946921656e-7],[3,-5.201559387864083e-7,-0.00013274188745839724,-0.0016831742919327297,0.9999985746507961],[1,-0.00008520880999876285,-0.01521126484522551,-0.19287764768672164]],[5,"mixamorig:RightHandMiddle4",44,[[4,"mixamorig:RightHandMiddle4_end",-65,[0,"75DhtY+yZVpoh5FO3haoe8",1,0],[1,0,0.07528479397296906,0]]],[0,"78jCXsKsZVMJHnlMCN42Li",1,0],[1,-0.00023760080512147397,0.07528479397296906,-7.385477118759809e-8]],[1,"mixamorig:RightHandRing1",3,[-66],[0,"80gTuAs/JQHYZ36jnUy4b4",1,0],[1,-0.12674738466739655,0.20796334743499756,-0.007255943026393652],[3,-0.025904931432788644,-0.007503921720004985,-0.00006435527105392096,0.9996362446133503],[1,-2.968790377106615,-0.8597966363696631,0.014903402034235071]],[1,"mixamorig:RightHandRing2",46,[-67],[0,"27r8dR6PpdFZqugwtazSEY",1,0],[1,-0.00041815757867880166,0.10766938328742981,-3.7520369033927636e-8],[3,2.7603846315126787e-7,-0.000010383073457026435,0.000015271587469338736,0.9999999998294471],[1,0.00003164984817986993,-0.0011898130584273511,0.0017499946884555555]],[1,"mixamorig:RightHandRing3",47,[-68],[0,"a2OmSfCP5R3qrTkR1uB4/Z",1,0],[1,-0.00039366542478092015,0.10228995978832245,3.242748789489269e-7],[3,-5.676334755014357e-7,-0.0002635100604234911,0.0069475614283369316,0.9999758306840847],[1,0.00014475830565753011,-0.03019776352051926,0.7961382898366735]],[5,"mixamorig:RightHandRing4",48,[[4,"mixamorig:RightHandRing4_end",-69,[0,"8bn/m8+DxWbrxM+RymnyHP",1,0],[1,0,0.0808509811758995,0]]],[0,"f1+oL8Nn5ak5fdgpZTrNHr",1,0],[1,0.0008119940757751465,0.08084733784198761,9.703129677518518e-8]],[18,"mixamorig:LeftUpLeg",4,[-70],[0,"6ebZdrw51WvImiAAzUMseY",1,0],[1,0.6318703889846802,-0.1365356296300888,-0.02725861594080925],[3,0.005355753003901506,0.09173130242904333,0.9947034119353536,-0.046063069248574416],[1,0.9999998807907104,0.999998927116394,0.9999822378158569],[1,-169.4122685911506,-178.90073487970503,-5.201324613618657]],[1,"mixamorig:LeftLeg",50,[-71],[0,"aaL95+U7BeL5k7HNnEl5kD",1,0],[1,1.7285346487483366e-8,0.567600429058075,3.1590460025654465e-8],[3,-0.33088705617019887,0.024945835159243025,-0.14397713834981432,0.9322886060656465],[1,-39.50589604697825,-2.916258910674914,-16.55675642968666]],[1,"mixamorig:LeftFoot",51,[-72],[0,"33Vd2Ti31eNZCDCIR0YmEf",1,0],[1,9.015202806494926e-9,0.2859746217727661,2.3841858265427618e-8],[3,0.6229950183047651,-0.14603513463895923,-0.0005784173257162241,0.7684729091203045],[1,76.84473700563007,-13.153685506655172,-10.535652200106737]],[1,"mixamorig:LeftToeBase",52,[-73],[0,"ebwEif4BZczr+MdDiE6wEQ",1,0],[1,5.9604645663569045e-9,0.4342445731163025,2.3841858265427618e-8],[3,0.3537771331708721,0.2697661464086731,-0.10733809103421318,0.8891268191379363],[1,43.39450623585855,33.756196702447255,-0.000009345007423915672]],[5,"mixamorig:LeftToe_End",53,[[4,"mixamorig:LeftToe_End_end",-74,[0,"77ejWQFG5akpz7WKOMDJS1",1,0],[1,0,0.24659891426563263,8.881783998477905e-18]]],[0,"12r2OXgP9bJame+1eEz0i2",1,0],[1,3.218650945768786e-8,0.24660342931747437,3.5762786065873797e-9]],[18,"mixamorig:RightUpLeg",4,[-75],[0,"800JTvdf5TaLC7Sw0AkK3N",1,0],[1,-0.6318703889846802,-0.1365356594324112,-0.03242172300815582],[3,-0.0056080874420530915,0.09501629384592439,0.994390017304035,0.04614051088911132],[1,0.9999997019767761,0.9999846816062927,0.9997595548629761],[1,-169.0315622178067,178.85378453085812,5.203741196843518]],[1,"mixamorig:RightLeg",55,[-76],[0,"58dsNoKZVQz5uLf1HRfb/P",1,0],[1,1.2651085512516147e-7,0.567660927772522,-5.811453096526975e-9],[3,-0.33121266705642244,-0.024167010374238063,0.14409275241819977,0.9321756291018826],[1,-39.55945340369413,3.0134048022967606,16.537829580746294]],[1,"mixamorig:RightFoot",56,[-77],[0,"8fYjV+60hRsZ0HfHBP+YNS",1,0],[1,3.8594006213088505e-8,0.28581997752189636,0],[3,0.6197642756194547,0.14793987744564965,0.0015165112158028271,0.770716378132054],[1,76.35630293854027,13.306700521544292,10.702722292398573]],[1,"mixamorig:RightToeBase",57,[-78],[0,"65aU9thcVXI6RtaFZbP9pK",1,0],[1,2.5033950024067053e-8,0.4331407845020294,2.8610228852699038e-8],[3,0.354565618594917,-0.27343770720694716,0.10924691650589502,0.8874571277654857],[1,43.556380074455525,-34.24958118680834,0.00003952681707772606]],[5,"mixamorig:RightToe_End",58,[[4,"mixamorig:RightToe_End_end",-79,[0,"837ONnO4tTC4P5dctklhbu",1,0],[1,0,0.23923544585704803,-8.881783998477905e-18]]],[0,"2c2UlJixNeL6E9sE4vF9Fg",1,0],[1,-1.27553946072112e-7,0.2392958402633667,5.9604645663569045e-9]],[15,"Cylinder",1,[[8,-80,[6,"09B2Sa9r5VnL4FTJbDLLxN"],[0,1,2,3],[2],1,4,5]],[0,"63Hh6KZ8Jf36ZAjKZ3GVai",1,0],[1,-0.5616799592971802,1.3372324705123901,1.9640516768504312e-7]],[13,"Tube_2",1,[[8,-81,[6,"3cyWTHFyBe2K4KZ3AD9YVU"],[6],[2],1,7,8]],[0,"bdxeIiUxhTQa4HeLCVz/Ih",1,0],[1,-0.9380465745925903,2.2400078773498535,-0.1057715192437172],[3,1.1688473355122163e-7,1.2034068548393814e-7,-0.7120194956320207,0.7021596953969196],[1,179.99862133151453,179.99862161155184,-89.2010690149828]],[15,"Sphere",1,[[8,-82,[6,"85jgzGT1pcl4BKomWBkAoW"],[9],[2],1,10,11]],[0,"6bZUwI1utZ9pIu8N7bIP81",1,0],[1,0.006740205455571413,4.420176982879639,7.392118277493864e-7]],[26,"Cube_2",1,[[8,-83,[6,"80KebJ5xBZsaX4uYIIl1qT"],[12],[2],1,13,14]],[0,"2eDKKgVLVYtZM7OSP+Ehq/",1,0],[1,0.6801506280899048,4.86531925201416,1.4026217460632324],[3,0.015053610015892135,0.17085273221651662,0.0022047168599293875,0.9851791065299792],[1,0.2200000286102295,0.07000000029802322,0.08000000566244125],[1,1.6565911403182667,19.66924534847442,0.5436295256883367]],[13,"Sphere_2",1,[[8,-84,[6,"8497r99p1d+6Jqtir1n1TY"],[15],[2],1,16,17]],[0,"36zY/bB7xdU5mH6pOKRiA6",1,0],[1,0.6334942579269409,4.222414970397949,1.2855079174041748],[3,1.6198321931381928e-7,0.07086002653228583,4.112718509438957e-9,0.9974862688978817],[1,0.000018481854874135475,8.12677156094867,0.000001785395556920449]],[15,"Cube",1,[[8,-85,[6,"08lbh0qLpfdoIYFrV1xngJ"],[18],[2],1,19,20]],[0,"09dkERh0ZTN5jR89AWEDSU",1,0],[1,2.2276749334082524e-9,1.7705727815628052,1.0680880546569824]],[13,"Plane",1,[[8,-86,[6,"c0+WK8429RY6GwAYdxYh3N"],[21],[2],1,22,23]],[0,"05iAy35gdZkJdL370XGnZA",1,0],[1,0.006630038842558861,4.0528740882873535,1.6389082670211792],[3,0.7105661649453853,1.240871853004146e-9,-4.9634865238381615e-9,0.7036303896470132],[1,90.56199750289102,5.042029433020009e-7,-2.991685838090333e-7]],[13,"Sphere_1",1,[[8,-87,[6,"11d7A0gRVVb7op2x59BvEu"],[24],[2],1,25,26]],[0,"92V5HVDvZQsqDTi5lSIW6O",1,0],[1,-0.6339263916015625,4.222414970397949,1.284816026687622],[3,1.6242509159987743e-7,-0.07794151263424288,-1.2698282113177073e-8,0.9969579332189795],[1,0.00001844250993039401,-8.940507158825197,-0.000002901379254499165]],[13,"Tube",1,[[8,-88,[6,"a8SgDDM59Zi5+wAv2W9JTO"],[27],[2],1,28,29]],[0,"89dhEUhtVTY5ymRFy3yDjc",1,0],[1,0.6671333312988281,4.216505527496338,1.422549843788147],[3,-0.7080794722801492,0.03196718238945418,0.03181420706539813,0.7046910077575453],[1,-90.2737239569533,5.1698176487404455,-0.024765528357252504]],[13,"Cube_3",1,[[8,-89,[6,"bau9mDkW1eEaquw7AF2pto"],[30],[2],1,31,32]],[0,"a5meJVb+1YIZUr1i4e941C",1,0],[1,1.3584901094436646,5.9861297607421875,0.43703019618988037],[3,-0.3898720379737646,0.3690960049107219,-0.17848911590683728,0.8245662912512999],[1,-38.95503237250641,35.271358064105044,-35.602090732337366]]],0,[0,5,1,0,0,1,0,5,1,0,2,1,0,-2,6,0,-3,60,0,-4,61,0,-5,62,0,-6,63,0,-7,64,0,-8,65,0,-9,66,0,-10,67,0,-11,68,0,-12,69,0,-1,15,0,-2,19,0,-3,23,0,-4,27,0,-1,34,0,-2,38,0,-3,42,0,-4,46,0,-1,7,0,-2,50,0,-3,55,0,-1,9,0,-2,12,0,-3,31,0,-1,8,0,-1,10,0,-1,11,0,2,11,0,-1,13,0,-1,14,0,-1,16,0,-1,17,0,-1,18,0,2,18,0,-1,20,0,-1,21,0,-1,22,0,2,22,0,-1,24,0,-1,25,0,-1,26,0,2,26,0,-1,28,0,-1,29,0,-1,30,0,2,30,0,-1,32,0,-1,33,0,-1,35,0,-1,36,0,-1,37,0,2,37,0,-1,39,0,-1,40,0,-1,41,0,2,41,0,-1,43,0,-1,44,0,-1,45,0,2,45,0,-1,47,0,-1,48,0,-1,49,0,2,49,0,-1,51,0,-1,52,0,-1,53,0,-1,54,0,2,54,0,-1,56,0,-1,57,0,-1,58,0,-1,59,0,2,59,0,0,60,0,0,61,0,0,62,0,0,63,0,0,64,0,0,65,0,0,66,0,0,67,0,0,68,0,0,69,0,8,1,2,2,14,3,2,33,4,2,6,5,2,8,89],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-2,-3,-4,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3,-1,1,3],[0,0,0,0,6,7,0,8,9,0,10,11,0,12,13,0,14,15,0,16,17,0,18,19,0,20,21,0,22,23,0,24,25]],[[[7,"Skin-5",1727217376,["Armature/mixamorig:Hips","Armature/mixamorig:Hips/mixamorig:Spine","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head/mixamorig:HeadTop_End","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3/mixamorig:LeftHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3/mixamorig:LeftHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3/mixamorig:LeftHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3/mixamorig:LeftHandRing4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3/mixamorig:RightHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3/mixamorig:RightHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3/mixamorig:RightHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3/mixamorig:RightHandRing4","Armature/mixamorig:Hips/mixamorig:LeftUpLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase/mixamorig:LeftToe_End","Armature/mixamorig:Hips/mixamorig:RightUpLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase/mixamorig:RightToe_End"],[[[7,1,5.729866041084409e-18,-1.7078010631439212e-16,0,-5.729837503353276e-18,0.9999998807907104,1.6391280155403365e-7,0,1.7078009307950232e-16,-1.6391280155403365e-7,0.9999998807907104,0,0.0050994642078876495,0.43182116746902466,0.948210597038269,1],[7,1,3.504372833521318e-17,-1.6724418051096884e-16,0,-5.729834608221132e-18,0.9850711226463318,0.17214782536029816,0,1.7078009307950232e-16,-0.17214784026145935,0.9850710034370422,0,0.0050994642078876495,0.012653635814785957,1.0083918571472168,1],[7,1,3.504371840904583e-17,-1.6724418051096884e-16,0,-5.729832126679295e-18,0.9850711226463318,0.17214778065681458,0,1.7078009307950232e-16,-0.17214779555797577,0.9850710034370422,0,0.0050994642078876495,-0.278416246175766,1.0083918571472168,1],[7,1,3.504372171776828e-17,-1.6724420698074844e-16,0,-5.729835848992051e-18,0.9850713014602661,0.17214778065681458,0,1.7078010631439212e-16,-0.17214779555797577,0.9850711822509766,0,0.005099464673548937,-0.6110686659812927,1.008392095565796,1],[7,1,5.729870590577778e-18,-1.7078010631439212e-16,0,-5.729837503353276e-18,1,1.8713507188294898e-7,0,1.7078009307950232e-16,-1.871351003046584e-7,0.9999998807907104,0,0.005099463276565075,-0.7969992160797119,1.1629550457000732,1],[7,1,5.729866868265022e-18,-1.7078010631439212e-16,0,-5.729837503353276e-18,1,1.641910358785026e-7,0,1.7078009307950232e-16,-1.641910500893573e-7,0.9999998807907104,0,0.0050994642078876495,-1.2708468437194824,1.1360505819320679,1],[7,1,5.729866868265022e-18,-1.7078010631439212e-16,0,-5.729837503353276e-18,1,1.641910500893573e-7,0,1.7078009307950232e-16,-1.6419106430021202e-7,0.9999998807907104,0,0.0050994642078876495,-4.526493549346924,0.9511983394622803,1],[7,-0.03613720089197159,0.9862489700317383,-0.16126617789268494,0,-0.17110653221607208,-0.16509483754634857,-0.9713217616081238,0,-0.9845892190933228,-0.007507152855396271,0.17471978068351746,0,-1.0084929466247559,-0.2529853582382202,0.9786626100540161,1],[7,0.015405328944325447,0.7163252234458923,-0.697596549987793,0,0.13706614077091217,-0.6926058530807495,-0.7081736326217651,0,-0.9904420375823975,-0.08470720797777176,-0.10885374248027802,0,-1.2613312005996704,-0.4864341914653778,1.0919413566589355,1],[7,-0.24868465960025787,0.964135468006134,-0.09272713214159012,0,-0.9405081272125244,-0.263249933719635,-0.21481019258499146,0,-0.23151656985282898,0.033790621906518936,0.9722437262535095,0,0.3275327980518341,-1.339554786682129,1.3747198581695557,1],[7,-0.27500149607658386,0.9613856077194214,0.010573784820735455,0,-0.08897118270397186,-0.014496243558824062,-0.9959286451339722,0,-0.9573180675506592,-0.2748226523399353,0.08952212333679199,0,-0.6062235236167908,-2.184554100036621,0.21960563957691193,1],[7,0.670055627822876,0.5009424090385437,-0.5477977395057678,0,-0.05939706787467003,-0.6994142532348633,-0.7122440338134766,0,-0.7399307489395142,0.5097806453704834,-0.4388919770717621,0,-2.141390562057495,-0.3841041624546051,0.6258584260940552,1],[7,0.6700555086135864,0.5434792637825012,-0.5056242942810059,0,-0.059397224336862564,-0.6397102475166321,-0.7663175463676453,0,-0.7399306893348694,0.5435079336166382,-0.3963603079319,0,-2.1150832176208496,-0.5303794145584106,0.5850000381469727,1],[7,0.6700540781021118,0.7005816698074341,-0.24538326263427734,0,-0.05939853936433792,-0.27890363335609436,-0.9584802985191345,0,-0.7399320006370544,0.6568090319633484,-0.14526700973510742,0,-2.1198267936706543,-0.8041777014732361,0.2867017388343811,1],[7,0.6700540781021118,0.7005818486213684,-0.24538321793079376,0,-0.05939857289195061,-0.2789035737514496,-0.9584804177284241,0,-0.739932119846344,0.6568091511726379,-0.14526690542697906,0,-2.1413891315460205,-0.842155396938324,0.2867015600204468,1],[7,0.04565251246094704,0.9875149726867676,-0.15076492726802826,0,-0.08895278722047806,-0.14630410075187683,-0.985232412815094,0,-0.9949891567230225,0.05838926509022713,0.08116306364536285,0,-1.1820415258407593,-1.9794671535491943,0.5513288974761963,1],[7,0.045652471482753754,0.9852970242500305,-0.1646362543106079,0,-0.08895277976989746,-0.16014374792575836,-0.9830774068832397,0,-0.9949890971183777,0.05952473729848862,0.08033396303653717,0,-1.1819217205047607,-2.0976600646972656,0.5808835029602051,1],[7,0.04565253481268883,0.9876826405525208,0.14966236054897308,0,-0.08895290642976761,0.15324264764785767,-0.9841768145561218,0,-0.9949890971183777,0.031617261469364166,0.09485316276550293,0,-1.181861162185669,-2.2828640937805176,-0.13513141870498657,1],[7,0.04565253108739853,0.9876826405525208,0.14966239035129547,0,-0.0889529138803482,0.15324269235134125,-0.9841768145561218,0,-0.9949890971183777,0.03161725401878357,0.09485317021608353,0,-1.1820415258407593,-2.359639883041382,-0.1351311206817627,1],[7,-0.010744811967015266,0.9933704733848572,-0.11445509642362595,0,-0.08963502198457718,-0.11495772004127502,-0.9893182516098022,0,-0.9959167838096619,-0.00037085404619574547,0.09027597308158875,0,-1.2149949073791504,-2.064840316772461,0.49425292015075684,1],[7,-0.010744720697402954,0.9840158820152283,-0.1777568906545639,0,-0.08963491022586823,-0.17799928784370422,-0.9799398183822632,0,-0.9959167838096619,0.005404041614383459,0.09011472016572952,0,-1.2149860858917236,-2.155111789703369,0.6333906054496765,1],[7,-0.01074458658695221,0.9723882675170898,-0.23312203586101532,0,-0.08963481336832047,-0.23313353955745697,-0.9683049917221069,0,-0.9959167838096619,0.010491810739040375,0.08966474235057831,0,-1.214988112449646,-2.2369604110717773,0.7611174583435059,1],[7,-0.010744585655629635,0.9723882675170898,-0.2331220656633377,0,-0.08963479101657867,-0.23313356935977936,-0.9683049917221069,0,-0.9959167838096619,0.010491808876395226,0.08966471999883652,0,-1.2149953842163086,-2.318742513656616,0.7611173987388611,1],[7,-0.06580573320388794,0.9977294206619263,-0.014339502900838852,0,-0.09002595394849777,-0.020248519256711006,-0.9957337975502014,0,-0.9937632083892822,-0.06423403322696686,0.09115400910377502,0,-1.227769136428833,-2.192180633544922,0.2717498242855072,1],[7,-0.06580574065446854,0.992867112159729,-0.09941910207271576,0,-0.0900259017944336,-0.10513623803853989,-0.9903743863105774,0,-0.9937630295753479,-0.05622201785445213,0.0963023453950882,0,-1.2276335954666138,-2.249624490737915,0.46539735794067383,1],[7,-0.06580569595098495,0.9056461453437805,-0.41889697313308716,0,-0.09002574533224106,-0.4234832525253296,-0.9014195203781128,0,-0.9937630891799927,-0.02160702273249626,0.10939908772706985,0,-1.2275770902633667,-2.0658085346221924,1.2080450057983398,1],[7,-0.06580568850040436,0.9056460857391357,-0.41889697313308716,0,-0.09002574533224106,-0.4234832227230072,-0.9014195799827576,0,-0.9937630891799927,-0.021607015281915665,0.10939910262823105,0,-1.227769136428833,-2.1266539096832275,1.2080453634262085,1],[7,-0.02113480120897293,-0.9862490296363831,0.16390827298164368,0,0.17104779183864594,-0.16509459912776947,-0.9713321924209595,0,0.9850359559059143,0.007507232949137688,0.1721849888563156,0,1.0087167024612427,-0.24558307230472565,0.9773724675178528,1],[7,0.04267669841647148,-0.713920533657074,0.6989250779151917,0,-0.2105337679386139,-0.6902799010276794,-0.6922348737716675,0,0.9766544699668884,-0.11760500073432922,-0.17976327240467072,0,1.3042587041854858,-0.5289220809936523,1.0108951330184937,1],[7,-0.23825405538082123,-0.9638346433639526,0.11940488964319229,0,0.9215371608734131,-0.2631678283214569,-0.28550317883491516,0,0.30660149455070496,0.042013734579086304,0.9509101510047913,0,-0.21832089126110077,-1.3389629125595093,1.407673954963684,1],[7,-0.3113378584384918,-0.9487881660461426,-0.05357008054852486,0,0.09054563194513321,0.026497846469283104,-0.9955397844314575,0,0.9459757208824158,-0.3147996962070465,0.07765885442495346,0,0.5154860615730286,-2.2221603393554688,0.12144166976213455,1],[7,0.7215988636016846,-0.5235259532928467,0.45300763845443726,0,0.015162291005253792,-0.6422328352928162,-0.7663596868515015,0,0.6921454071998596,0.5598727464675903,-0.4554966986179352,0,2.1989502906799316,-0.36076149344444275,0.43641144037246704,1],[7,0.721600353717804,-0.4345673620700836,0.5389289855957031,0,0.015161543153226376,-0.7683439254760742,-0.6398577094078064,0,0.6921439170837402,0.46989238262176514,-0.5478485226631165,0,2.176438808441162,-0.3559492230415344,0.5078458786010742,1],[7,0.7215990424156189,-0.592701256275177,0.3577713966369629,0,0.015162501484155655,-0.5031238794326782,-0.8640814423561096,0,0.6921454071998596,0.6289447546005249,-0.35406693816185,0,2.169663906097412,-0.6019377112388611,0.3213331401348114,1],[7,0.7215989828109741,-0.5927013754844666,0.3577713072299957,0,0.015162350609898567,-0.5031239986419678,-0.8640814423561096,0,0.6921453475952148,0.6289446949958801,-0.35406702756881714,0,2.1989502906799316,-0.6646145582199097,0.3213331401348114,1],[7,0.0646623745560646,-0.987719714641571,0.14222635328769684,0,0.07414816319942474,-0.13737499713897705,-0.9877398610115051,0,0.9951483011245728,0.07441543787717819,0.06435463577508926,0,1.2286640405654907,-1.9536877870559692,0.5219512581825256,1],[7,0.0646623894572258,-0.9733725786209106,0.21991977095603943,0,0.07414811849594116,-0.2150851935148239,-0.9737765192985535,0,0.9951484799385071,0.07927335053682327,0.05826583877205849,0,1.2286540269851685,-2.030501365661621,0.6847320199012756,1],[7,0.0646623969078064,-0.9940392971038818,-0.0877775326371193,0,0.07414808124303818,0.09250447154045105,-0.9929476380348206,0,0.9951484799385071,0.0576978400349617,0.0796876773238182,0,1.2288024425506592,-2.2638096809387207,-0.006792336702346802,1],[7,0.0646623894572258,-0.9940392971038818,-0.08777731657028198,0,0.07414807379245758,0.09250426292419434,-0.9929476976394653,0,0.9951484799385071,0.0576978474855423,0.07968765497207642,0,1.2286641597747803,-2.356691360473633,-0.006791489664465189,1],[7,0.045628417283296585,-0.9911206364631653,0.12489073723554611,0,0.07524824887514114,-0.12125564366579056,-0.989764928817749,0,0.9961200952529907,0.054559215903282166,0.06904741376638412,0,1.3354594707489014,-2.007659912109375,0.4962422549724579,1],[7,0.04562840983271599,-0.9765239357948303,0.21052128076553345,0,0.0752481147646904,-0.20678214728832245,-0.9754891991615295,0,0.9961201548576355,0.06035134196281433,0.0640464574098587,0,1.33524751663208,-2.070402145385742,0.6786722540855408,1],[7,0.04562844708561897,-0.9234145283699036,0.38108256459236145,0,0.07524814456701279,-0.3772188127040863,-0.9230623245239258,0,0.9961202144622803,0.07079363614320755,0.052273329347372055,0,1.3352222442626953,-2.0412116050720215,1.05916428565979,1],[7,0.04562844708561897,-0.923414409160614,0.38108256459236145,0,0.07524814456701279,-0.3772187829017639,-0.923062264919281,0,0.9961201548576355,0.07079363614320755,0.05227333679795265,0,1.3354597091674805,-2.1164956092834473,1.05916428565979,1],[7,-0.11514373868703842,-0.9840898513793945,0.13531115651130676,0,0.08340934664011002,-0.1453143209218979,-0.985863447189331,0,0.989840567111969,-0.1022297814488411,0.09881436079740524,0,1.115614414215088,-2.1872448921203613,0.5530747175216675,1],[7,-0.11514384299516678,-0.9833391904830933,0.14066308736801147,0,0.08340955525636673,-0.15067578852176666,-0.9850581288337708,0,0.9898405075073242,-0.10169075429439545,0.09936929494142532,0,1.1160322427749634,-2.2918710708618164,0.5655522346496582,1],[7,-0.11514388769865036,-0.9929680824279785,-0.02750108763575554,0,0.08340957015752792,0.017922747880220413,-0.9963542222976685,0,0.9898405075073242,-0.117017962038517,0.08075936883687973,0,1.11642587184906,-2.4552958011627197,0.15291179716587067,1],[7,-0.11514385789632797,-0.992967963218689,-0.027501100674271584,0,0.08340955525636673,0.017922764644026756,-0.9963541030883789,0,0.9898404479026794,-0.11701793223619461,0.08075933903455734,0,1.1156138181686401,-2.5361428260803223,0.1529117077589035,1],[7,-1,-6.720872391952071e-8,4.166731315535799e-8,0,6.57737473375164e-8,-0.9994376301765442,-0.03353272005915642,0,4.3896751122929345e-8,-0.033532097935676575,0.9994561672210693,0,0.6267709732055664,-0.6007468700408936,0.9558801054954529,1],[7,-0.9619072675704956,-0.27330324053764343,-0.006297815591096878,0,0.2732219696044922,-0.9603384137153625,-0.05567328631877899,0,0.009167485870420933,-0.055272217839956284,0.9984475374221802,0,0.9222938418388367,-0.9742669463157654,0.9336807131767273,1],[7,-0.9226692318916321,0.05672526732087135,0.38140326738357544,0,0.24546904861927032,-0.6764081716537476,0.694429874420166,0,0.29737141728401184,0.7343541979789734,0.6101727485656738,0,1.1528030633926392,-0.24311457574367523,1.3865541219711304,1],[7,-0.9790445566177368,-0.0931505411863327,-0.18109412491321564,0,-0.1817794144153595,-0.0011450523743405938,0.9833385944366455,0,-0.09180419892072678,0.9956696033477783,-0.015811506658792496,0,0.1880069077014923,0.7398826479911804,1.7684828042984009,1],[7,-0.9790447950363159,-0.09315039217472076,-0.18109411001205444,0,-0.1817794293165207,-0.0011450835736468434,0.9833388328552246,0,-0.09180407971143723,0.9956696629524231,-0.01581144705414772,0,0.18800634145736694,0.49327903985977173,1.7684826850891113,1],[7,-1,6.72174564897432e-8,5.287439819312567e-8,0,-6.910509142699084e-8,-0.9993317723274231,-0.036569688469171524,0,5.0368051063287567e-8,-0.036560360342264175,0.9995867013931274,0,-0.6369698643684387,-0.6038294434547424,0.9594424366950989,1],[7,-0.9618826508522034,0.2734510600566864,0.002535725710913539,0,-0.2732797861099243,-0.9608591794967651,-0.045489825308322906,0,-0.010000206530094147,-0.04443749040365219,0.9992173910140991,0,-0.9330512285232544,-0.9615073800086975,0.9505577087402344,1],[7,-0.9207809567451477,-0.056836050003767014,-0.3859970271587372,0,-0.24814431369304657,-0.678212583065033,0.6918622255325317,0,-0.3010464608669281,0.7328707575798035,0.610327422618866,0,-1.1697815656661987,-0.24502912163734436,1.3789385557174683,1],[7,-0.978326141834259,0.09599506109952927,0.18349622189998627,0,0.18423275649547577,-0.0012061871821060777,0.9828832745552063,0,0.09454944729804993,0.9956343770027161,-0.016501223668456078,0,-0.19098693132400513,0.7477065920829773,1.7703897953033447,1],[7,-0.9783259034156799,0.09599511325359344,0.1834975779056549,0,0.1842341274023056,-0.001206161337904632,0.9828830361366272,0,0.09454946219921112,0.9956343770027161,-0.01650138944387436,0,-0.1909743845462799,0.5084108114242554,1.7703814506530762,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[7,"Skin-2",3082876424,["Armature/mixamorig:Hips","Armature/mixamorig:Hips/mixamorig:Spine","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head/mixamorig:HeadTop_End","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3/mixamorig:LeftHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3/mixamorig:LeftHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3/mixamorig:LeftHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3/mixamorig:LeftHandRing4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3/mixamorig:RightHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3/mixamorig:RightHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3/mixamorig:RightHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3/mixamorig:RightHandRing4","Armature/mixamorig:Hips/mixamorig:LeftUpLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase/mixamorig:LeftToe_End","Armature/mixamorig:Hips/mixamorig:RightUpLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase/mixamorig:RightToe_End"],[[[7,1,1.955777406692505e-8,1.0587911840678754e-21,0,-1.955777406692505e-8,1,1.6391278734317893e-7,0,3.2057681365721923e-15,-1.6391278734317893e-7,1,0,0.011839666403830051,3.081425189971924,-0.11987718939781189,1],[7,1,1.9265801398660187e-8,3.3668252630292272e-9,0,-1.955777406692505e-8,0.9850712418556213,0.17214784026145935,0,3.3587219580555848e-15,-0.17214785516262054,0.9850711226463318,0,0.011839666403830051,2.8065712451934814,0.4123725891113281,1],[7,1,1.9265801398660187e-8,3.3668243748508075e-9,0,-1.955777406692505e-8,0.9850712418556213,0.17214779555797577,0,3.3723926463077956e-15,-0.17214781045913696,0.9850711226463318,0,0.011839666403830051,2.5155012607574463,0.4123724102973938,1],[7,1,1.9265804951373866e-8,3.3668243748508075e-9,0,-1.9557775843281888e-8,0.9850714206695557,0.17214779555797577,0,3.381948448502245e-15,-0.17214781045913696,0.9850713014602661,0,0.011839667335152626,2.182849407196045,0.4123724699020386,1],[7,1,1.9557775843281888e-8,4.541769487353877e-16,0,-1.955777406692505e-8,1.0000001192092896,1.8713505767209426e-7,0,3.2057681365721923e-15,-1.871350860938037e-7,1,0,0.011839666403830051,1.8526053428649902,0.09486737102270126,1],[7,1,1.9557775843281888e-8,5.442610202582507e-18,0,-1.955777406692505e-8,1.0000001192092896,1.6419102166764787e-7,0,3.2057681365721923e-15,-1.641910358785026e-7,1,0,0.011839666403830051,1.3787575960159302,0.06796279549598694,1],[7,1,1.9557775843281888e-8,5.4428219608193204e-18,0,-1.955777406692505e-8,1.0000001192092896,1.641910358785026e-7,0,3.205768348330429e-15,-1.641910500893573e-7,1,0,0.011839666403830051,-1.8768889904022217,-0.11688940972089767,1],[7,-0.03613720461726189,0.9862489700317383,-0.16126619279384613,0,-0.17110654711723328,-0.16509486734867096,-0.9713218808174133,0,-0.9845893383026123,-0.007507156115025282,0.17471979558467865,0,-0.4104728102684021,-0.675755500793457,-1.782658576965332,1],[7,0.015405331738293171,0.7163252234458923,-0.697596549987793,0,0.13706615567207336,-0.6926059722900391,-0.7081737518310547,0,-0.990442156791687,-0.08470721542835236,-0.10885375738143921,0,0.1598232090473175,-2.2262625694274902,-0.672874927520752,1],[7,-0.24868467450141907,0.964135468006134,-0.09272713959217072,0,-0.940508246421814,-0.2632499933242798,-0.21481022238731384,0,-0.23151659965515137,0.03379062935709953,0.9722438454627991,0,-1.9188374280929565,-2.0666558742523193,-0.23350918292999268,1],[7,-0.27500149607658386,0.9613856077194214,0.010573765262961388,0,-0.08897119015455246,-0.01449626311659813,-0.9959287643432617,0,-0.9573181867599487,-0.2748226821422577,0.08952213078737259,0,0.17868471145629883,-1.9229485988616943,-2.5147571563720703,1],[7,0.670055627822876,0.5009424090385437,-0.5477977395057678,0,-0.059397075325250626,-0.6994143128395081,-0.7122440934181213,0,-0.7399308085441589,0.5097807049751282,-0.4388920068740845,0,-1.503941535949707,-2.7783894538879395,-0.7962231636047363,1],[7,0.6700555086135864,0.5434792637825012,-0.5056242942810059,0,-0.05939725041389465,-0.6397103071212769,-0.7663176655769348,0,-0.7399307489395142,0.5435080528259277,-0.3963603377342224,0,-1.4776346683502197,-2.8022098541259766,-1.025498390197754,1],[7,0.6700540781021118,0.7005816698074341,-0.24538327753543854,0,-0.05939855799078941,-0.27890366315841675,-0.9584803581237793,0,-0.7399320602416992,0.6568090915679932,-0.14526700973510742,0,-1.4823805093765259,-2.2399699687957764,-2.0993874073028564,1],[7,0.6700540781021118,0.7005818486213684,-0.24538323283195496,0,-0.0593985952436924,-0.27890363335609436,-0.9584805369377136,0,-0.7399321794509888,0.6568092107772827,-0.14526692032814026,0,-1.503942847251892,-2.2779476642608643,-2.0993881225585938,1],[7,0.04565251246094704,0.9875149726867676,-0.15076494216918945,0,-0.08895279467105865,-0.14630413055419922,-0.9852325320243835,0,-0.9949892163276672,0.058389268815517426,0.08116306364536285,0,-0.3546871840953827,-2.4228241443634033,-2.146852493286133,1],[7,0.045652471482753754,0.9852970242500305,-0.1646362692117691,0,-0.08895278722047806,-0.16014379262924194,-0.9830775260925293,0,-0.9949891567230225,0.059524741023778915,0.08033397048711777,0,-0.35456743836402893,-2.578914165496826,-2.1107962131500244,1],[7,0.04565253481268883,0.9876826405525208,0.1496623456478119,0,-0.0889529138803482,0.15324266254901886,-0.9841769337654114,0,-0.9949891567230225,0.031617265194654465,0.09485317021608353,0,-0.35450711846351624,-1.903944492340088,-2.843113422393799,1],[7,0.04565253108739853,0.9876826405525208,0.14966237545013428,0,-0.0889529213309288,0.15324269235134125,-0.9841769337654114,0,-0.9949891567230225,0.03161725774407387,0.09485317766666412,0,-0.35468751192092896,-1.9807202816009521,-2.8431131839752197,1],[7,-0.010744813829660416,0.9933704733848572,-0.11445511877536774,0,-0.08963502943515778,-0.11495774984359741,-0.989318311214447,0,-0.9959168434143066,-0.00037085366784594953,0.09027598053216934,0,-0.3888375163078308,-2.3623411655426025,-2.224242687225342,1],[7,-0.010744722560048103,0.9840158820152283,-0.1777569055557251,0,-0.08963491767644882,-0.17799930274486542,-0.979939877986908,0,-0.9959168434143066,0.005404041614383459,0.09011472761631012,0,-0.38882845640182495,-2.6258788108825684,-2.0605106353759766,1],[7,-0.010744588449597359,0.9723882675170898,-0.2331220507621765,0,-0.08963482081890106,-0.23313356935977936,-0.9683050513267517,0,-0.9959168434143066,0.01049181167036295,0.0896647498011589,0,-0.3888302147388458,-2.8593239784240723,-1.9018484354019165,1],[7,-0.010744587518274784,0.9723882675170898,-0.2331220805644989,0,-0.08963479846715927,-0.23313359916210175,-0.9683050513267517,0,-0.9959168434143066,0.0104918098077178,0.08966472744941711,0,-0.3888375163078308,-2.941106081008911,-1.901848554611206,1],[7,-0.06580573320388794,0.9977294206619263,-0.014339522458612919,0,-0.09002596139907837,-0.020248539745807648,-0.9957338571548462,0,-0.9937633275985718,-0.06423404067754745,0.09115401655435562,0,-0.4053189754486084,-2.1704986095428467,-2.464007616043091,1],[7,-0.06580574065446854,0.992867112159729,-0.09941912442445755,0,-0.09002590924501419,-0.10513627529144287,-0.9903745055198669,0,-0.9937631487846375,-0.05622202157974243,0.09630236029624939,0,-0.40518349409103394,-2.461451768875122,-2.262232542037964,1],[7,-0.06580569595098495,0.9056461453437805,-0.41889700293540955,0,-0.09002575278282166,-0.42348331212997437,-0.9014196395874023,0,-0.9937632083892822,-0.02160702459514141,0.10939909517765045,0,-0.4051264226436615,-3.158689260482788,-1.300031304359436,1],[7,-0.06580568850040436,0.9056460857391357,-0.41889700293540955,0,-0.09002575278282166,-0.42348331212997437,-0.9014196395874023,0,-0.9937632083892822,-0.021607017144560814,0.10939911007881165,0,-0.4053185284137726,-3.2195346355438232,-1.300031065940857,1],[7,-0.021134797483682632,-0.9862490296363831,0.16390825808048248,0,0.17104780673980713,-0.16509461402893066,-0.971332311630249,0,0.9850360751152039,0.00750723434612155,0.1721850037574768,0,0.4096778631210327,-0.6976843476295471,-1.779077172279358,1],[7,0.04267669469118118,-0.713920533657074,0.6989250779151917,0,-0.21053379774093628,-0.6902799606323242,-0.6922349333763123,0,0.976654589176178,-0.11760502308607101,-0.1797632873058319,0,-0.29643815755844116,-2.2370901107788086,-0.6265393495559692,1],[7,-0.23825404047966003,-0.9638346433639526,0.1194048821926117,0,0.9215372204780579,-0.2631678581237793,-0.28550320863723755,0,0.30660152435302734,0.0420137383043766,0.9509102702140808,0,1.8943041563034058,-2.0876243114471436,-0.36364760994911194,1],[7,-0.3113378584384918,-0.9487881660461426,-0.05357009917497635,0,0.090545654296875,0.026497866958379745,-0.9955399036407471,0,0.9459757804870605,-0.3147996962070465,0.07765886187553406,0,-0.2570878863334656,-1.822112798690796,-2.5996522903442383,1],[7,0.7215988636016846,-0.5235259532928467,0.45300760865211487,0,0.015162309631705284,-0.6422328948974609,-0.7663598656654358,0,0.6921454668045044,0.5598728656768799,-0.4554966986179352,0,1.5047156810760498,-2.6639466285705566,-1.10457444190979,1],[7,0.721600353717804,-0.434567391872406,0.5389289855957031,0,0.015161512419581413,-0.7683440446853638,-0.6398577690124512,0,0.6921440362930298,0.4698924124240875,-0.5478485822677612,0,1.4822036027908325,-2.8965718746185303,-0.5987406969070435,1],[7,0.7215990424156189,-0.592701256275177,0.3577713668346405,0,0.015162487514317036,-0.503123939037323,-0.8640815615653992,0,0.6921454071998596,0.6289448142051697,-0.35406696796417236,0,1.475429892539978,-2.6107802391052246,-1.5875544548034668,1],[7,0.7215989828109741,-0.5927013754844666,0.35777127742767334,0,0.015162336640059948,-0.5031239986419678,-0.8640815615653992,0,0.6921454071998596,0.6289447546005249,-0.3540670573711395,0,1.504715919494629,-2.673457145690918,-1.5875543355941772,1],[7,0.0646623745560646,-0.987719714641571,0.14222633838653564,0,0.07414817065000534,-0.13737499713897705,-0.9877399802207947,0,0.9951484203338623,0.07441544532775879,0.06435464322566986,0,0.362656831741333,-2.4038166999816895,-2.1629462242126465,1],[7,0.0646623894572258,-0.9733725786209106,0.21991975605487823,0,0.07414811849594116,-0.2150852084159851,-0.973776638507843,0,0.9951485991477966,0.07927335798740387,0.058265842497348785,0,0.36264660954475403,-2.6916236877441406,-1.9561407566070557,1],[7,0.0646623969078064,-0.9940392971038818,-0.08777755498886108,0,0.07414808869361877,0.09250450879335403,-0.9929477572441101,0,0.9951485991477966,0.057697843760252,0.0796876847743988,0,0.3627949059009552,-2.087035894393921,-2.7234156131744385,1],[7,0.0646623894572258,-0.9940392971038818,-0.08777733892202377,0,0.07414808124303818,0.09250429272651672,-0.9929478168487549,0,0.9951485991477966,0.057697851210832596,0.07968766242265701,0,0.3626565635204315,-2.1799182891845703,-2.723414659500122,1],[7,0.045628417283296585,-0.9911206364631653,0.12489071488380432,0,0.07524825632572174,-0.12125563621520996,-0.9897650480270386,0,0.9961202144622803,0.05455922335386276,0.06904742121696472,0,0.4712008535861969,-2.3938937187194824,-2.1991498470306396,1],[7,0.04562840983271599,-0.9765239357948303,0.21052126586437225,0,0.075248122215271,-0.20678216218948364,-0.9754893183708191,0,0.996120274066925,0.06035134941339493,0.0640464648604393,0,0.47098854184150696,-2.689335346221924,-1.9729763269424438,1],[7,0.04562844708561897,-0.9234145283699036,0.38108253479003906,0,0.07524815201759338,-0.3772188425064087,-0.9230624437332153,0,0.9961203336715698,0.07079364359378815,0.052273333072662354,0,0.47096312046051025,-3.122530221939087,-1.4398492574691772,1],[7,0.04562844708561897,-0.923414409160614,0.38108253479003906,0,0.07524815201759338,-0.3772188127040863,-0.9230623841285706,0,0.996120274066925,0.07079364359378815,0.05227334052324295,0,0.47120070457458496,-3.1978139877319336,-1.4398491382598877,1],[7,-0.11514373868703842,-0.9840898513793945,0.13531114161014557,0,0.08340936154127121,-0.1453143209218979,-0.9858635663986206,0,0.9898406863212585,-0.10222979635000229,0.09881436824798584,0,0.2786029577255249,-2.469712972640991,-2.1637039184570312,1],[7,-0.11514384299516678,-0.9833391904830933,0.14066307246685028,0,0.08340956270694733,-0.15067578852176666,-0.9850582480430603,0,0.9898406267166138,-0.10169076919555664,0.09936930239200592,0,0.2790214419364929,-2.5891153812408447,-2.149648904800415,1],[7,-0.11514388769865036,-0.9929680824279785,-0.02750110626220703,0,0.08340958505868912,0.017922768369317055,-0.996354341506958,0,0.9898406267166138,-0.11701797693967819,0.08075936883687973,0,0.279415100812912,-2.2895150184631348,-2.5734760761260986,1],[7,-0.11514385789632797,-0.992967963218689,-0.027501119300723076,0,0.08340956270694733,0.017922786995768547,-0.9963542222976685,0,0.989840567111969,-0.1170179471373558,0.08075934648513794,0,0.2786030173301697,-2.370361804962158,-2.5734755992889404,1],[7,-1,-8.675550589032355e-8,4.1011485762965094e-8,0,8.533153561529616e-8,-0.9994377493858337,-0.033532723784446716,0,4.3896754675643024e-8,-0.03353210166096687,0.9994562864303589,0,0.6200308799743652,-3.213045597076416,-0.2004757672548294,1],[7,-0.9619072675704956,-0.2733032703399658,-0.006297816522419453,0,0.27322205901145935,-0.9603385329246521,-0.05567329376935959,0,0.009167487733066082,-0.05527222529053688,0.9984476566314697,0,1.6299488544464111,-3.46159029006958,-0.28030410408973694,1],[7,-0.9226692318916321,0.05672525241971016,0.38140326738357544,0,0.2454690784215927,-0.6764082312583923,0.6944299340248108,0,0.29737141728401184,0.7343542575836182,0.6101728081703186,0,1.4793609380722046,-2.8193013668060303,2.5773706436157227,1],[7,-0.9790445566177368,-0.0931505411863327,-0.18109411001205444,0,-0.1817794293165207,-0.0011450513266026974,0.9833387136459351,0,-0.09180421382188797,0.9956697225570679,-0.015811508521437645,0,-0.20218051970005035,-0.3272422254085541,4.389608383178711,1],[7,-0.9790447950363159,-0.09315039217472076,-0.18109409511089325,0,-0.1817794293165207,-0.0011450826423242688,0.9833389520645142,0,-0.09180409461259842,0.9956697821617126,-0.01581144891679287,0,-0.20218123495578766,-0.5738459229469299,4.389608860015869,1],[7,-1,4.76727457510151e-8,5.215917298073691e-8,0,-4.954732446549315e-8,-0.9993318915367126,-0.03656969219446182,0,5.0368054616001245e-8,-0.036560364067554474,0.999586820602417,0,-0.6437103152275085,-3.212613344192505,-0.20509964227676392,1],[7,-0.9618826508522034,0.273451030254364,0.0025357247795909643,0,-0.2732797861099243,-0.9608592987060547,-0.045489829033613205,0,-0.010000206530094147,-0.04443749412894249,0.9992175102233887,0,-1.6529366970062256,-3.458097457885742,-0.23720766603946686,1],[7,-0.9207809567451477,-0.05683606490492821,-0.3859970271587372,0,-0.24814432859420776,-0.6782126426696777,0.6918622851371765,0,-0.3010464906692505,0.7328708171844482,0.6103274822235107,0,-1.511927843093872,-2.8251774311065674,2.557614326477051,1],[7,-0.978326141834259,0.09599506109952927,0.18349623680114746,0,0.18423280119895935,-0.0012061897432431579,0.9828833937644958,0,0.09454945474863052,0.9956344962120056,-0.016501223668456078,0,0.18957564234733582,-0.31826773285865784,4.393502712249756,1],[7,-0.9783259034156799,0.09599511325359344,0.1834975928068161,0,0.184234157204628,-0.0012061638990417123,0.9828831553459167,0,0.09454947710037231,0.9956344962120056,-0.01650138944387436,0,0.18959178030490875,-0.5575634241104126,4.393494129180908,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[7,"Skin-6",2815393054,["Armature/mixamorig:Hips","Armature/mixamorig:Hips/mixamorig:Spine","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head/mixamorig:HeadTop_End","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3/mixamorig:LeftHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3/mixamorig:LeftHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3/mixamorig:LeftHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3/mixamorig:LeftHandRing4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3/mixamorig:RightHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3/mixamorig:RightHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3/mixamorig:RightHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3/mixamorig:RightHandRing4","Armature/mixamorig:Hips/mixamorig:LeftUpLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase/mixamorig:LeftToe_End","Armature/mixamorig:Hips/mixamorig:RightUpLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase/mixamorig:RightToe_End"],[[[7,0.9999998807907104,-1.1175870895385742e-8,4.656612873077393e-10,0,-5.752548437598648e-10,-0.00980826374143362,0.9999518990516663,0,-1.1170767422186145e-8,-0.9999518990516663,-0.00980826374143362,0,0.011729500256478786,2.7141225337982178,1.5190303325653076,1],[7,0.9999998807907104,-1.1089192675228787e-8,-1.4651906354856692e-9,0,-5.752550102933185e-10,-0.18180124461650848,0.9833353161811829,0,-1.1170768310364565e-8,-0.9833354353904724,-0.1818012297153473,0,0.011729500256478786,2.1626179218292236,1.9635827541351318,1],[7,0.9999998807907104,-1.1089191787050368e-8,-1.4651901913964593e-9,0,-5.752547882487136e-10,-0.1818011999130249,0.9833353161811829,0,-1.1170767422186145e-8,-0.9833354353904724,-0.1818011850118637,0,0.011729500256478786,1.8715479373931885,1.9635827541351318,1],[7,0.9999998807907104,-1.1089193563407207e-8,-1.4651901913964593e-9,0,-5.752546772264111e-10,-0.1818011999130249,0.9833354949951172,0,-1.1170768310364565e-8,-0.9833356142044067,-0.1818011850118637,0,0.011729500256478786,1.538895845413208,1.9635831117630005,1],[7,0.9999998807907104,-1.1175872671742582e-8,4.656610097519831e-10,0,-5.752548437598648e-10,-0.00980828795582056,0.9999518990516663,0,-1.1170767422186145e-8,-0.9999520182609558,-0.009808287024497986,0,0.011729500256478786,1.4853025674819946,1.7337749004364014,1],[7,0.9999998807907104,-1.1175872671742582e-8,4.6566125955216364e-10,0,-5.752548437598648e-10,-0.009808264672756195,0.9999518990516663,0,-1.1170767422186145e-8,-0.9999520182609558,-0.00980826374143362,0,0.011729500256478786,1.0114550590515137,1.706870436668396,1],[7,0.9999998807907104,-1.1175872671742582e-8,4.6566125955216364e-10,0,-5.752548437598648e-10,-0.009808264672756195,0.9999518990516663,0,-1.1170767422186145e-8,-0.9999520182609558,-0.00980826374143362,0,0.011729500256478786,-2.2441916465759277,1.5220180749893188,1],[7,-0.03613719716668129,0.9862488508224487,-0.16126614809036255,0,-0.98286372423172,-0.005887527018785477,0.1842382252216339,0,0.18075527250766754,0.16516053676605225,0.9695614576339722,0,-1.9612720012664795,-0.6275279521942139,-1.1395223140716553,1],[7,0.015405325219035149,0.7163251638412476,-0.6975964903831482,0,-0.9917388558387756,-0.07791000604629517,-0.10190268605947495,0,-0.1273452192544937,0.693403422832489,0.70920729637146,0,-1.5137664079666138,-2.1107730865478516,-0.5910856127738953,1],[7,-0.2486846148967743,0.9641353487968445,-0.09272712469100952,0,-0.22228087484836578,0.03637098893523216,0.9743039608001709,0,0.9427337646484375,0.26290586590766907,0.20526403188705444,0,-1.9527935981750488,-1.9146900177001953,1.4388190507888794,1],[7,-0.2750014662742615,0.9613854885101318,0.010573795065283775,0,-0.9563994407653809,-0.27466726303100586,0.09928598999977112,0,0.09835638850927353,0.017191024497151375,0.9950027465820312,0,-1.3575615882873535,-2.3681390285491943,-2.002232789993286,1],[7,0.6700555682182312,0.5009423494338989,-0.547797679901123,0,-0.7393126487731934,0.5166161060333252,-0.4318851828575134,0,0.06665150821208954,0.6943807005882263,0.7165145874023438,0,-2.6948771476745605,-1.686064600944519,-1.2538573741912842,1],[7,0.6700554490089417,0.5434792041778564,-0.5056242346763611,0,-0.7393125891685486,0.5497562289237976,-0.38882511854171753,0,0.06665171682834625,0.6343487501144409,0.7701683640480042,0,-2.668569803237915,-1.6765429973602295,-1.3935705423355103,1],[7,0.670054018497467,0.7005816102027893,-0.24538321793079376,0,-0.7393138408660889,0.659512996673584,-0.1358591616153717,0,0.06665299832820892,0.27244818210601807,0.9598591327667236,0,-2.6733174324035645,-1.0611557960510254,-1.9853874444961548,1],[7,0.670054018497467,0.7005817890167236,-0.24538317322731018,0,-0.7393139600753784,0.6595131158828735,-0.13585905730724335,0,0.06665303558111191,0.2724481523036957,0.9598592519760132,0,-2.6948797702789307,-1.0991332530975342,-1.985388159751892,1],[7,0.04565250873565674,0.987514853477478,-0.15076489746570587,0,-0.9940689206123352,0.05982142686843872,0.09082241356372833,0,0.09870746731758118,0.14572438597679138,0.984389066696167,0,-1.9527151584625244,-2.273500442504883,-1.651938796043396,1],[7,0.045652467757463455,0.985296905040741,-0.16463622450828552,0,-0.9940688610076904,0.06109258532524109,0.08997222781181335,0,0.09870745986700058,0.15955223143100739,0.9822423458099365,0,-1.9525952339172363,-2.4226460456848145,-1.61803138256073,1],[7,0.04565253108739853,0.9876825213432312,0.14966236054897308,0,-0.9940688610076904,0.030112724751234055,0.10450150817632675,0,0.09870757907629013,-0.15354542434215546,0.9831992983818054,0,-1.9525349140167236,-1.9085218906402588,-2.326183795928955,1],[7,0.04565252736210823,0.9876825213432312,0.14966239035129547,0,-0.9940688610076904,0.030112719163298607,0.10450151562690735,0,0.09870758652687073,-0.15354545414447784,0.9831992983818054,0,-1.952715277671814,-1.985297679901123,-2.326183319091797,1],[7,-0.010744810104370117,0.9933703541755676,-0.11445507407188416,0,-0.994989812374115,0.0007566793356090784,0.09997496753931046,0,0.09939876198768616,0.1149558275938034,0.9883853197097778,0,-1.988128900527954,-2.320834159851074,-1.7128974199295044,1],[7,-0.010744718834757805,0.9840157628059387,-0.17775686085224152,0,-0.994989812374115,0.007149614859372377,0.09972173720598221,0,0.0993986502289772,0.17793773114681244,0.9790089130401611,0,-1.9881198406219482,-2.551750898361206,-1.5528669357299805,1],[7,-0.01074458472430706,0.9723881483078003,-0.23312199115753174,0,-0.994989812374115,0.012777900323271751,0.0991576537489891,0,0.09939855337142944,0.23301942646503448,0.967379093170166,0,-1.9881216287612915,-2.756605625152588,-1.399209976196289,1],[7,-0.010744583792984486,0.9723881483078003,-0.23312202095985413,0,-0.994989812374115,0.012777898460626602,0.09915763139724731,0,0.09939853101968765,0.23301945626735687,0.967379093170166,0,-1.988128900527954,-2.8383877277374268,-1.3992100954055786,1],[7,-0.06580572575330734,0.9977293014526367,-0.014339489862322807,0,-0.9928325414657593,-0.06403235346078873,0.10091588646173477,0,0.09976855665445328,0.020877547562122345,0.9947919249534607,0,-2.0009310245513916,-2.268444776535034,-1.9488775730133057,1],[7,-0.06580573320388794,0.9928669929504395,-0.09941907972097397,0,-0.992832362651825,-0.05518813803792,0.10601141303777695,0,0.0997685045003891,0.1056826189160347,0.9893823862075806,0,-2.000795602798462,-2.515087127685547,-1.7406238317489624,1],[7,-0.06580568850040436,0.905646026134491,-0.4188969135284424,0,-0.9928324222564697,-0.017452428117394447,0.1182350441813469,0,0.09976834058761597,0.42367488145828247,0.9003033638000488,0,-2.0007386207580566,-3.0386545658111572,-0.7895967960357666,1],[7,-0.06580568104982376,0.9056459665298462,-0.4188969135284424,0,-0.9928324222564697,-0.01745242066681385,0.11823505163192749,0,0.09976834803819656,0.4236748516559601,0.9003033638000488,0,-2.0009305477142334,-3.0994997024536133,-0.7895965576171875,1],[7,-0.02113480120897293,-0.9862489104270935,0.16390827298164368,0,0.9833110570907593,0.00912613794207573,0.18170364201068878,0,-0.18070091307163239,0.16501307487487793,0.969596803188324,0,1.9612370729446411,-0.6246323585510254,-1.1401275396347046,1],[7,0.04267669841647148,-0.7139204740524292,0.6989250183105469,0,0.9786725640296936,-0.11082901805639267,-0.1729651391506195,0,0.20094452798366547,0.6914002299308777,0.6939647793769836,0,1.3815332651138306,-2.1762137413024902,-0.6669722199440002,1],[7,-0.23825404047966003,-0.9638345241546631,0.1194048747420311,0,0.29754823446273804,0.04459289461374283,0.9536647796630859,0,-0.924500048160553,0.26274314522743225,0.2761628329753876,0,2.0583395957946777,-1.9219993352890015,1.299659252166748,1],[7,-0.31133782863616943,-0.948788046836853,-0.053570061922073364,0,0.9450422525405884,-0.31504449248313904,0.08741948008537292,0,-0.09981951117515564,-0.023408977314829826,0.9947303533554077,0,1.260055661201477,-2.3476686477661133,-2.1067066192626953,1],[7,0.7215988039970398,-0.5235258936882019,0.4530075788497925,0,0.6919634342193604,0.5661450028419495,-0.4479582607746124,0,-0.021950233727693558,0.6367107033729553,0.7707905769348145,0,2.633429527282715,-1.5104153156280518,-1.5696556568145752,1],[7,0.7216002941131592,-0.43456730246543884,0.5389289259910583,0,0.6919620037078857,0.477405846118927,-0.5415464639663696,0,-0.02194943279027939,0.7636983394622803,0.6452003717422485,0,2.610915422439575,-1.844199299812317,-1.2616519927978516,1],[7,0.7215989828109741,-0.5927011966705322,0.3577713668346405,0,0.6919633746147156,0.6338492035865784,-0.34557488560676575,0,-0.021950434893369675,0.4969310164451599,0.8675127625465393,0,2.6041436195373535,-1.3951339721679688,-1.8504977226257324,1],[7,0.7215989232063293,-0.5927013158798218,0.35777127742767334,0,0.6919633746147156,0.6338491439819336,-0.3455750048160553,0,-0.021950284019112587,0.4969310760498047,0.8675127625465393,0,2.633429765701294,-1.4578109979629517,-1.8504977226257324,1],[7,0.06466236710548401,-0.9877195954322815,0.14222635328769684,0,0.9943732619285583,0.07575925439596176,0.07403939217329025,0,-0.08390511572360992,0.1366385519504547,0.9870612621307373,0,1.9663711786270142,-2.231289863586426,-1.6946914196014404,1],[7,0.0646623820066452,-0.9733724594116211,0.21991975605487823,0,0.9943734407424927,0.08137911558151245,0.0678139328956604,0,-0.08390507102012634,0.214297354221344,0.9731582999229431,0,1.9663612842559814,-2.482593536376953,-1.5030022859573364,1],[7,0.0646623894572258,-0.9940391778945923,-0.0877775177359581,0,0.9943734407424927,0.056787777692079544,0.08942276984453201,0,-0.08390503376722336,-0.09306593984365463,0.9921184182167053,0,1.9665095806121826,-2.0263419151306152,-2.228093147277832,1],[7,0.0646623820066452,-0.9940391778945923,-0.08777730166912079,0,0.9943734407424927,0.05678778514266014,0.08942274749279022,0,-0.08390502631664276,-0.09306572377681732,0.9921184778213501,0,1.9663711786270142,-2.1192243099212646,-2.2280924320220947,1],[7,0.04562841355800629,-0.9911205172538757,0.12489072978496552,0,0.9953342080116272,0.055745888501405716,0.0787518098950386,0,-0.08501467853784561,0.1207147091627121,0.989040195941925,0,2.076105833053589,-2.259829521179199,-1.7224584817886353,1],[7,0.04562840610742569,-0.9765238165855408,0.21052126586437225,0,0.995334267616272,0.062376584857702255,0.0736110731959343,0,-0.08501454442739487,0.20618030428886414,0.974814236164093,0,2.0758938789367676,-2.5143661499023438,-1.5097336769104004,1],[7,0.045628443360328674,-0.923414409160614,0.3810825049877167,0,0.9953343272209167,0.0744900330901146,0.06132429838180542,0,-0.08501457422971725,0.37650635838508606,0.9225053191184998,0,2.0758683681488037,-2.8678507804870605,-1.0151772499084473,1],[7,0.045628443360328674,-0.9234142899513245,0.3810825049877167,0,0.995334267616272,0.0744900330901146,0.06132430210709572,0,-0.08501457422971725,0.37650632858276367,0.922505259513855,0,2.076105833053589,-2.9431347846984863,-1.0151771306991577,1],[7,-0.11514372378587723,-0.984089732170105,0.13531115651130676,0,0.988974928855896,-0.10079961270093918,0.10847906023263931,0,-0.09311380237340927,0.14631004631519318,0.9848469495773315,0,1.8702365159988403,-2.583775281906128,-1.6396610736846924,1],[7,-0.11514382809400558,-0.9833390712738037,0.14066308736801147,0,0.9889748692512512,-0.10020802170038223,0.10902607440948486,0,-0.09311401098966599,0.15166597068309784,0.9840362668037415,0,1.8706549406051636,-2.7003252506256104,-1.624993085861206,1],[7,-0.11514387279748917,-0.992967963218689,-0.027501072734594345,0,0.9889748692512512,-0.11718813329935074,0.09052783250808716,0,-0.09311402589082718,-0.016774149611592293,0.9955142736434937,0,1.8710485696792603,-2.4877705574035645,-2.075152635574341,1],[7,-0.11514384299516678,-0.9929678440093994,-0.02750108577311039,0,0.9889748096466064,-0.11718809604644775,0.09052781015634537,0,-0.09311401098966599,-0.016774168238043785,0.9955141544342041,0,1.8702363967895508,-2.568617105484009,-2.0751521587371826,1],[7,-0.9999998807907104,-5.6054741293110055e-8,4.2507476649689124e-8,0,4.382478380193788e-8,-0.02372790314257145,0.9997370839118958,0,-5.503036959453311e-8,0.9997185468673706,0.023728344589471817,0,0.6201410889625549,-2.9009058475494385,1.4498573541641235,1],[7,-0.961907148361206,-0.27330321073532104,-0.006297813728451729,0,0.006487259175628424,-0.045850470662117004,0.9989457130432129,0,-0.27329879999160767,0.9608345031738281,0.045877743512392044,0,1.5447243452072144,-3.199411630630493,1.3765090703964233,1],[7,-0.9226691126823425,0.05672526732087135,0.38140320777893066,0,0.2949495315551758,0.740953266620636,0.6033324003219604,0,-0.24837391078472137,0.669173002243042,-0.7003812193870544,0,1.8766655921936035,-1.367322325706482,3.322279691696167,1],[7,-0.9790444374084473,-0.0931505337357521,-0.18109412491321564,0,-0.09001688659191132,0.9956330060958862,-0.025455433875322342,0,0.18267114460468292,-0.008620628155767918,-0.9831362962722778,0,-0.28576332330703735,1.3049993515014648,4.002532005310059,1],[7,-0.9790446758270264,-0.09315038472414017,-0.18109411001205444,0,-0.09001675993204117,0.995633065700531,-0.025455374270677567,0,0.18267114460468292,-0.00862059649080038,-0.9831365346908569,0,-0.28576380014419556,1.0583957433700562,4.002532482147217,1],[7,-0.9999998807907104,7.836882076617258e-8,5.374856115736293e-8,0,5.16186808852126e-8,-0.02675705961883068,0.9998974204063416,0,7.977853044849326e-8,0.9996424913406372,0.026763886213302612,0,-0.6435999870300293,-2.905475616455078,1.4465630054473877,1],[7,-0.9618825316429138,0.273451030254364,0.00253572640940547,0,-0.007319370284676552,-0.035011157393455505,0.9996156692504883,0,0.273364782333374,0.9612489342689514,0.035687219351530075,0,-1.5688438415527344,-3.1780309677124023,1.4171257019042969,1],[7,-0.9207808375358582,-0.05683603510260582,-0.3859969675540924,0,-0.29859817028045654,0.7394875884056091,0.6035122871398926,0,0.251085102558136,0.6709919571876526,-0.6978151798248291,0,-1.9140697717666626,-1.3749547004699707,3.303804397583008,1],[7,-0.9783260226249695,0.09599504619836807,0.18349619209766388,0,0.09273793548345566,0.9955984950065613,-0.026140650734305382,0,-0.18515126407146454,-0.008559153415262699,-0.9826743006706238,0,0.2769721746444702,1.313917636871338,4.005423069000244,1],[7,-0.9783257842063904,0.09599509835243225,0.18349754810333252,0,0.09273794293403625,0.9955984950065613,-0.026140812784433365,0,-0.18515263497829437,-0.008559178560972214,-0.9826740622520447,0,0.27698779106140137,1.0746219158172607,4.0054144859313965,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[3,".bin",343375595,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":4896,"length":888,"count":222,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4896,"count":68,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,4,5]]},"minPosition",8,[1,-1.8235119581222534,-0.07114457339048386,-0.0878995880484581],"maxPosition",8,[1,0.5192778706550598,0.37283650040626526,0.45700371265411377]]],-1],0,0,[],[],[]],[[[7,"Skin-9",2830009341,["Armature/mixamorig:Hips","Armature/mixamorig:Hips/mixamorig:Spine","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head/mixamorig:HeadTop_End","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3/mixamorig:LeftHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3/mixamorig:LeftHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3/mixamorig:LeftHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3/mixamorig:LeftHandRing4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3/mixamorig:RightHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3/mixamorig:RightHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3/mixamorig:RightHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3/mixamorig:RightHandRing4","Armature/mixamorig:Hips/mixamorig:LeftUpLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase/mixamorig:LeftToe_End","Armature/mixamorig:Hips/mixamorig:RightUpLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase/mixamorig:RightToe_End"],[[[7,0.6638193726539612,-0.582152783870697,-0.46951231360435486,0,0.006551807746291161,0.6322826147079468,-0.774709939956665,0,0.7478641271591187,0.5111913681030273,0.42353564500808716,0,1.3635896444320679,4.647377967834473,0.3171519935131073,1],[7,0.6638193726539612,-0.4926365613937378,-0.5627192854881287,0,0.006551823578774929,0.7562079429626465,-0.6542984247207642,0,0.7478641271591187,0.4306492507457733,0.5052131414413452,0,1.3635896444320679,4.27391242980957,1.112452507019043,1],[7,0.6638193726539612,-0.4926365613937378,-0.5627192258834839,0,0.0065518333576619625,0.7562078833580017,-0.6542984247207642,0,0.7478641271591187,0.4306492805480957,0.5052131414413452,0,1.3635896444320679,3.9828426837921143,1.1124522686004639,1],[7,0.6638193726539612,-0.49263668060302734,-0.5627193450927734,0,0.006551837548613548,0.7562080025672913,-0.6542985439300537,0,0.7478641867637634,0.4306493401527405,0.50521320104599,0,1.3635896444320679,3.650191307067871,1.112452507019043,1],[7,0.6638193726539612,-0.5821528434753418,-0.46951231360435486,0,0.00655182683840394,0.6322826743125916,-0.7747098803520203,0,0.7478641271591187,0.5111914277076721,0.42353567481040955,0,1.3635896444320679,3.418558120727539,0.5318965911865234,1],[7,0.6638193726539612,-0.5821528434753418,-0.46951231360435486,0,0.006551799364387989,0.6322826743125916,-0.774709939956665,0,0.7478641271591187,0.5111914277076721,0.42353564500808716,0,1.3635896444320679,2.9447104930877686,0.5049920082092285,1],[7,0.6638193726539612,-0.5821528434753418,-0.46951231360435486,0,0.006551799364387989,0.6322826743125916,-0.774709939956665,0,0.7478641271591187,0.5111914277076721,0.42353564500808716,0,1.3635896444320679,-0.31093621253967285,0.3201397657394409,1],[7,0.5378983020782471,0.754326343536377,0.3763731122016907,0,0.6543468236923218,-0.09210903197526932,-0.7505635619163513,0,-0.5315024852752686,0.650005578994751,-0.5431365966796875,0,-1.157560110092163,0.39559489488601685,-3.4453365802764893,1],[7,0.39545756578445435,0.918484091758728,0.00029543612617999315,0,0.8540709018707275,-0.3676058053970337,-0.36800622940063477,0,-0.3378993570804596,0.1457832157611847,-0.9298232197761536,0,-0.03756535053253174,-2.379577875137329,-2.772390127182007,1],[7,0.4911377727985382,0.7773984670639038,-0.39298203587532043,0,-0.4169379770755768,-0.18630941212177277,-0.8896353244781494,0,-0.7648176550865173,0.6007826924324036,0.23262345790863037,0,-3.828968048095703,-1.1608555316925049,-0.27033713459968567,1],[7,0.31871604919433594,0.7756580710411072,0.5447701215744019,0,0.6835872530937195,0.21004101634025574,-0.6989926695823669,0,-0.6566033959388733,0.5951782464981079,-0.4632866680622101,0,-0.7507489323616028,-0.7662015557289124,-4.020917892456055,1],[7,0.8267806768417358,0.5003530979156494,0.2570613622665405,0,0.540066123008728,-0.8338775038719177,-0.11391448229551315,0,0.15736024081707,0.23301242291927338,-0.9596577286720276,0,-1.014578104019165,-2.9737014770507812,-2.843858003616333,1],[7,0.8267806172370911,0.4779976010322571,0.29656684398651123,0,0.5400660037994385,-0.8219779133796692,-0.1807776838541031,0,0.15736010670661926,0.3096291720867157,-0.937745988368988,0,-0.9882717132568359,-2.831789255142212,-3.08221435546875,1],[7,0.8267810344696045,0.3190443813800812,0.4632965922355652,0,0.5400661826133728,-0.68059241771698,-0.4950982630252838,0,0.1573578417301178,0.6595486998558044,-0.7350060939788818,0,-0.993022084236145,-1.4426642656326294,-3.9955050945281982,1],[7,0.8267810940742493,0.31904441118240356,0.46329665184020996,0,0.5400662422180176,-0.6805924773216248,-0.49509841203689575,0,0.1573578119277954,0.6595489382743835,-0.7350060343742371,0,-1.0145844221115112,-1.480641484260559,-3.9955060482025146,1],[7,0.5492487549781799,0.713288426399231,0.4353681802749634,0,0.7148839831352234,-0.13127025961875916,-0.6868107914924622,0,-0.4327433705329895,0.6884675621986389,-0.5820186734199524,0,-0.8671113848686218,-1.291538119316101,-3.858006000518799,1],[7,0.5492486953735352,0.7193398475646973,0.4252949059009552,0,0.7148839235305786,-0.14091500639915466,-0.6848968267440796,0,-0.4327434003353119,0.6802149415016174,-0.5916420817375183,0,-0.8669916391372681,-1.4718025922775269,-3.8376879692077637,1],[7,0.5492488145828247,0.5515874624252319,0.6277555227279663,0,0.7148838639259338,0.07886961847543716,-0.6947810053825378,0,-0.4327434003353119,0.8303797841072083,-0.3510020077228546,0,-0.8669314384460449,-0.3150561451911926,-4.140528678894043,1],[7,0.5492488145828247,0.5515874624252319,0.6277555227279663,0,0.7148838043212891,0.07886961102485657,-0.6947810053825378,0,-0.4327433705329895,0.8303797841072083,-0.3510019779205322,0,-0.86711186170578,-0.39183172583580017,-4.140528202056885,1],[7,0.5126438140869141,0.7265156507492065,0.4575712978839874,0,0.7148017287254333,-0.06589009612798691,-0.6962162256240845,0,-0.4756625294685364,0.6839836835861206,-0.5530928373336792,0,-0.9789705276489258,-1.1997331380844116,-3.88873028755188,1],[7,0.5126438140869141,0.7542943358421326,0.4101664125919342,0,0.7148018479347229,-0.11028528213500977,-0.6905762553215027,0,-0.4756624400615692,0.6472072601318359,-0.5957081317901611,0,-0.9789611101150513,-1.5721120834350586,-3.795950412750244,1],[7,0.5126438736915588,0.7762834429740906,0.3668519854545593,0,0.7148019075393677,-0.14916342496871948,-0.6832338571548462,0,-0.4756622612476349,0.6124821305274963,-0.6313565969467163,0,-0.9789626002311707,-1.9053893089294434,-3.694105625152588,1],[7,0.5126438736915588,0.7762834429740906,0.36685195565223694,0,0.7148019075393677,-0.14916343986988068,-0.6832337975502014,0,-0.4756622612476349,0.6124821305274963,-0.6313566565513611,0,-0.9789698719978333,-1.9871712923049927,-3.694105863571167,1],[7,0.47530972957611084,0.7042585015296936,0.5273525714874268,0,0.7125254273414612,0.0434969998896122,-0.700296938419342,0,-0.516128420829773,0.7086098194122314,-0.4811275601387024,0,-1.0695515871047974,-0.8815982937812805,-4.002826690673828,1],[7,0.4753096103668213,0.7466866970062256,0.4653379023075104,0,0.7125252485275269,-0.016414988785982132,-0.701454222202301,0,-0.5161282420158386,0.6649729013442993,-0.539835512638092,0,-1.0694160461425781,-1.3085527420043945,-3.9054150581359863,1],[7,0.4753095805644989,0.8578622937202454,0.19532792270183563,0,0.712525486946106,-0.24508824944496155,-0.657448947429657,0,-0.5161281824111938,0.45166778564453125,-0.7277416586875916,0,-1.0693585872650146,-2.6070799827575684,-3.2300455570220947,1],[7,0.4753096103668213,0.8578622341156006,0.19532789289951324,0,0.7125254273414612,-0.24508827924728394,-0.6574490070343018,0,-0.5161281824111938,0.45166778564453125,-0.7277416586875916,0,-1.069550633430481,-2.6679251194000244,-3.2300455570220947,1],[7,-0.5760921239852905,-0.5621055960655212,0.5934264063835144,0,-0.6551052927970886,-0.11666407436132431,-0.7464759349822998,0,0.48883000016212463,-0.8187957406044006,-0.30102917551994324,0,1.0794509649276733,-2.2860960960388184,-3.0033249855041504,1],[7,-0.3076587915420532,-0.016848839819431305,0.9513475894927979,0,-0.88946133852005,-0.3500196039676666,-0.2938443422317505,0,0.3379412889480591,-0.9365906715393066,0.09270025044679642,0,-0.14160960912704468,-4.334474563598633,-0.8443363904953003,1],[7,-0.8385863304138184,-0.5063341856002808,-0.20099419355392456,0,0.3435835838317871,-0.205259770154953,-0.9164160490036011,0,0.42275694012641907,-0.8375521302223206,0.3460961580276489,0,3.149322271347046,-3.7842350006103516,-0.23375128209590912,1],[7,-0.7035306692123413,-0.4974474310874939,0.5075337886810303,0,-0.6776463985443115,0.2544163465499878,-0.6899765133857727,0,0.21410216391086578,-0.8293479681015015,-0.5160833597183228,0,-0.12272980809211731,-3.200719118118286,-4.197094917297363,1],[7,0.1452137529850006,-0.2365161031484604,0.9607150554656982,0,-0.5218973755836487,-0.8432417511940002,-0.12871000170707703,0,0.8405569791793823,-0.48270416259765625,-0.24588751792907715,0,2.806367874145508,-4.132648944854736,-1.891370177268982,1],[7,0.1452159285545349,-0.06180078536272049,0.9874681830406189,0,-0.5218967199325562,-0.8526880741119385,0.02338397689163685,0,0.8405570387840271,-0.5187520384788513,-0.1560775339603424,0,2.783856153488159,-4.481832981109619,-1.1116563081741333,1],[7,0.14521381258964539,-0.3958487808704376,0.9067619442939758,0,-0.5218971967697144,-0.8092495203018188,-0.2697002589702606,0,0.8405571579933167,-0.4340721666812897,-0.32410669326782227,0,2.777082681655884,-3.9249653816223145,-2.611785888671875,1],[7,0.14521384239196777,-0.3958487808704376,0.906761884689331,0,-0.5218973159790039,-0.8092495799064636,-0.26970019936561584,0,0.8405570983886719,-0.4340722858905792,-0.32410675287246704,0,2.806368589401245,-3.987643003463745,-2.611785650253296,1],[7,-0.4674757719039917,-0.610633134841919,0.639212965965271,0,-0.7236452102661133,-0.15098156034946442,-0.673454999923706,0,0.5077432990074158,-0.7773874998092651,-0.3713017404079437,0,1.0010852813720703,-3.921567916870117,-3.489320993423462,1],[7,-0.4674758315086365,-0.5581508874893188,0.6855173707008362,0,-0.7236453294754028,-0.20378586649894714,-0.6594001054763794,0,0.5077433586120605,-0.8043250441551208,-0.30863845348358154,0,1.0010751485824585,-4.309548377990723,-3.1582889556884766,1],[7,-0.4674757719039917,-0.740804135799408,0.48236462473869324,0,-0.7236454486846924,0.007277090102434158,-0.6901333928108215,0,0.5077434182167053,-0.6716817021369934,-0.539481520652771,0,1.0012234449386597,-3.260655164718628,-4.362152576446533,1],[7,-0.4674758017063141,-0.7408040165901184,0.4823647737503052,0,-0.7236453890800476,0.007276964373886585,-0.6901333928108215,0,0.5077433586120605,-0.671681821346283,-0.5394814014434814,0,1.0010851621627808,-3.3535377979278564,-4.362151145935059,1],[7,-0.48120754957199097,-0.612951934337616,0.6266807913780212,0,-0.7238272428512573,-0.12542901933193207,-0.6784845590591431,0,0.4944823980331421,-0.7801006436347961,-0.3833140730857849,0,1.086047649383545,-3.8996775150299072,-3.5500783920288086,1],[7,-0.4812075197696686,-0.5561923980712891,0.6775614023208618,0,-0.7238273620605469,-0.18389751017093658,-0.6650229096412659,0,0.4944824278354645,-0.8104515671730042,-0.31409454345703125,0,1.0858350992202759,-4.306787490844727,-3.1879844665527344,1],[7,-0.48120754957199097,-0.42661988735198975,0.7657904624938965,0,-0.7238273620605469,-0.29940345883369446,-0.6216359734535217,0,0.49448248744010925,-0.8534360527992249,-0.16472402215003967,0,1.0858098268508911,-4.930523872375488,-2.347348690032959,1],[7,-0.4812074899673462,-0.42661982774734497,0.7657904028892517,0,-0.7238273620605469,-0.29940342903137207,-0.6216360330581665,0,0.49448245763778687,-0.8534359335899353,-0.16472400724887848,0,1.0860474109649658,-5.005807399749756,-2.347348213195801,1],[7,-0.5897339582443237,-0.5206645727157593,0.6173509359359741,0,-0.7148556709289551,-0.019128864631056786,-0.6990101933479309,0,0.3757590055465698,-0.8535469770431519,-0.3609192371368408,0,0.6861615777015686,-4.072188854217529,-3.4814281463623047,1],[7,-0.5897340774536133,-0.5172982215881348,0.6201743483543396,0,-0.7148554921150208,-0.02293151617050171,-0.6988958120346069,0,0.3757590353488922,-0.8554979562759399,-0.35627007484436035,0,0.6865801811218262,-4.198737144470215,-3.458634853363037,1],[7,-0.5897341370582581,-0.6146438717842102,0.5238572955131531,0,-0.714855432510376,0.09548144042491913,-0.6927226185798645,0,0.3757590055465698,-0.7830045819282532,-0.49569034576416016,0,0.6869738101959229,-3.6548337936401367,-4.135600566864014,1],[7,-0.5897340178489685,-0.6146438121795654,0.5238572359085083,0,-0.714855432510376,0.09548140317201614,-0.692722499370575,0,0.37575897574424744,-0.7830044627189636,-0.4956902861595154,0,0.6861617565155029,-3.735680341720581,-4.135599613189697,1],[7,-0.663819432258606,0.5975692868232727,-0.44973573088645935,0,-0.0065518515184521675,-0.6059492826461792,-0.7954909801483154,0,-0.7478640675544739,-0.5251060724258423,0.40616366267204285,0,-0.731718897819519,-4.7927727699279785,0.1838049292564392,1],[7,-0.801893949508667,0.4035908281803131,-0.44055360555648804,0,0.15934909880161285,-0.5661758780479431,-0.8087499141693115,0,-0.5758243799209595,-0.7187203764915466,0.3897084891796112,0,0.7615500688552856,-5.359028339385986,0.060351595282554626,1],[7,-0.8950057625770569,0.08664003014564514,-0.4375650882720947,0,-0.08121597766876221,-0.9962210059165955,-0.031132185831665993,0,-0.438602089881897,0.0076738158240914345,0.8986543416976929,0,0.7464959025382996,-3.48091197013855,4.447040557861328,1],[7,-0.5009821057319641,-0.5286476612091064,-0.685243546962738,0,-0.050228796899318695,-0.7726895809173584,0.6328107118606567,0,-0.8639987111091614,0.3514522612094879,0.3605438470840454,0,-1.8503831624984741,-0.01981508731842041,5.677766799926758,1],[7,-0.5009822845458984,-0.5286475419998169,-0.6852437257766724,0,-0.05022898316383362,-0.772689700126648,0.6328107714653015,0,-0.8639988899230957,0.35145238041877747,0.3605438768863678,0,-1.8503841161727905,-0.26641860604286194,5.677767276763916,1],[7,-0.6638193726539612,0.5989295244216919,-0.4480290412902832,0,-0.006551916245371103,-0.6035364270210266,-0.7975123524665833,0,-0.7478641271591187,-0.5263344645500183,0.4046665132045746,0,-1.9954603910446167,-4.7934980392456055,0.17448236048221588,1],[7,-0.4747304916381836,0.7617530226707458,-0.4409795105457306,0,-0.17134487628936768,-0.571316659450531,-0.8028496503829956,0,-0.863291323184967,-0.3054996728897095,0.4018465280532837,0,-3.3854751586914062,-4.6125407218933105,0.13167203962802887,1],[7,-0.3254293203353882,0.013002756983041763,-0.9455581307411194,0,0.07029362767934799,-0.9969567060470581,-0.03790342062711716,0,-0.9429721832275391,-0.07880529016256332,0.3234962522983551,0,-3.2767419815063477,-3.6437690258026123,3.3859972953796387,1],[7,-0.8010756373405457,-0.40303701162338257,-0.4426325261592865,0,0.03682892024517059,-0.7714617252349854,0.6354458332061768,0,-0.5974317789077759,0.4928613007068634,0.6326829195022583,0,-0.8030559420585632,0.24472582340240479,6.173480987548828,1],[7,-0.8010762929916382,-0.4030369818210602,-0.44263142347335815,0,0.036829739809036255,-0.7714617252349854,0.6354458332061768,0,-0.5974308848381042,0.4928613603115082,0.6326837539672852,0,-0.8030372858047485,0.005430218763649464,6.173474311828613,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[3,".bin",4091944225,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":9360,"length":1920,"count":480,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9360,"count":130,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,2,3,7,8,10,27,28]]},"minPosition",8,[1,-0.506486177444458,-0.496008962392807,-0.5073402523994446],"maxPosition",8,[1,0.14111755788326263,2.374335527420044,0.5374758243560791]]],-1],0,0,[],[],[]],[[[3,".bin",3326336543,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":1512,"length":264,"count":66,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1512,"count":21,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,4,5]]},"minPosition",8,[1,-0.48568934202194214,-0.4307630956172943,-0.1500689685344696],"maxPosition",8,[1,0.43129637837409973,0.43350809812545776,0.16698303818702698]]],-1],0,0,[],[],[]],[[[3,".bin",1034962064,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":6768,"length":1488,"count":372,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6768,"count":94,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,7,27,47]]},"minPosition",8,[1,-0.6010775566101074,-0.5870287418365479,-0.573859453201294],"maxPosition",8,[1,0.5987869501113892,0.5920107960700989,-0.1466245949268341]]],-1],0,0,[],[],[]],[[[7,"Skin-3",4243160813,["Armature/mixamorig:Hips","Armature/mixamorig:Hips/mixamorig:Spine","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head/mixamorig:HeadTop_End","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3/mixamorig:LeftHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3/mixamorig:LeftHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3/mixamorig:LeftHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3/mixamorig:LeftHandRing4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3/mixamorig:RightHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3/mixamorig:RightHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3/mixamorig:RightHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3/mixamorig:RightHandRing4","Armature/mixamorig:Hips/mixamorig:LeftUpLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase/mixamorig:LeftToe_End","Armature/mixamorig:Hips/mixamorig:RightUpLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase/mixamorig:RightToe_End"],[[[7,0.20715399086475372,0.002087344415485859,-0.07404644042253494,0,0.00005598720963462256,0.0699675902724266,0.0021289940923452377,0,0.026936598122119904,-0.0023125989828258753,0.07529324293136597,0,0.6852501034736633,3.5265676975250244,1.2827438116073608,1],[7,0.20715399086475372,0.01480310782790184,-0.07258167862892151,0,0.00005598683128482662,0.06855656206607819,0.014141968451440334,0,0.026936598122119904,-0.015239632688462734,0.07377109676599503,0,0.6852501034736633,3.003610610961914,1.8706841468811035,1],[7,0.20715399086475372,0.014803104102611542,-0.07258167862892151,0,0.00005598708594334312,0.06855656206607819,0.01414196565747261,0,0.026936598122119904,-0.01523962989449501,0.07377109676599503,0,0.6852501034736633,2.712540626525879,1.8706841468811035,1],[7,0.20715399086475372,0.014803104102611542,-0.0725816935300827,0,0.000055987013183766976,0.06855657696723938,0.01414196565747261,0,0.026936599984765053,-0.01523962989449501,0.07377111166715622,0,0.6852501034736633,2.3798885345458984,1.8706845045089722,1],[7,0.20715399086475372,0.002087346278131008,-0.07404644042253494,0,0.00005598723510047421,0.0699675977230072,0.0021289957221597433,0,0.026936598122119904,-0.0023126008454710245,0.07529324293136597,0,0.6852501034736633,2.2977476119995117,1.4974883794784546,1],[7,0.20715399086475372,0.0020873446483165026,-0.07404644042253494,0,0.000055987202358664945,0.0699675977230072,0.0021289940923452377,0,0.026936598122119904,-0.002312599215656519,0.07529324293136597,0,0.6852501034736633,1.8238999843597412,1.4705837965011597,1],[7,0.20715399086475372,0.0020873446483165026,-0.07404644042253494,0,0.000055987202358664945,0.0699675977230072,0.0021289940923452377,0,0.026936598122119904,-0.002312599215656519,0.07529324293136597,0,0.6852501034736633,-1.4317466020584106,1.285731554031372,1],[7,0.06506221741437912,0.2045166790485382,-0.048371780663728714,0,-0.014070108532905579,-0.01151205413043499,-0.06759810447692871,0,-0.07471063733100891,0.026382751762866974,0.01105752307921648,0,-1.8919802904129028,-0.09562572091817856,-2.0785679817199707,1],[7,0.07681609690189362,0.1532161980867386,-0.13792787492275238,0,0.007482416927814484,-0.048600200563669205,-0.04982001334428787,0,-0.07447561621665955,0.014519194141030312,-0.025349117815494537,0,-1.158003568649292,-2.171002149581909,-1.6105625629425049,1],[7,-0.03633619472384453,0.1966729462146759,-0.09164837002754211,0,-0.06631191819906235,-0.018293047323822975,-0.012965054251253605,0,-0.021955346688628197,0.029123518615961075,0.07120240479707718,0,-2.8296947479248047,-1.4871854782104492,0.9721157550811768,1],[7,0.013732628896832466,0.21947425603866577,-0.006517227739095688,0,-0.008278610184788704,-0.001545534934848547,-0.06949155032634735,0,-0.07928144186735153,0.0052376906387507915,0.009328404441475868,0,-1.388863444328308,-1.6674665212631226,-2.825401782989502,1],[7,0.19346995651721954,0.06456486135721207,-0.08246678858995438,0,-0.005693655461072922,-0.0478229746222496,-0.05079906806349754,0,-0.03752541169524193,0.053494177758693695,-0.04615428298711777,0,-2.11700177192688,-2.0373594760894775,-2.0977652072906494,1],[7,0.19346991181373596,0.07100377976894379,-0.07699257880449295,0,-0.005693666636943817,-0.04357144236564636,-0.05448955297470093,0,-0.03752541169524193,0.05704134702682495,-0.0416908785700798,0,-2.0906951427459717,-1.9586517810821533,-2.2630550861358643,1],[7,0.19346970319747925,0.09591174125671387,-0.04207628592848778,0,-0.005693761631846428,-0.018076660111546516,-0.06738557666540146,0,-0.037525542080402374,0.06896956264972687,-0.015330846421420574,0,-2.0954442024230957,-0.971088707447052,-2.8950462341308594,1],[7,0.19346973299980164,0.09591177105903625,-0.04207628592848778,0,-0.005693765357136726,-0.01807665452361107,-0.06738558411598206,0,-0.03752554580569267,0.06896957755088806,-0.015330837108194828,0,-2.117006540298462,-1.0090659856796265,-2.8950469493865967,1],[7,0.08294683694839478,0.19993875920772552,-0.03929789736866951,0,-0.00833957176655531,-0.010056949220597744,-0.06876999884843826,0,-0.0734805315732956,0.031334951519966125,0.004328371491283178,0,-1.7591336965560913,-1.7410492897033691,-2.5731070041656494,1],[7,0.08294682949781418,0.19936634600162506,-0.04210551455616951,0,-0.008339570835232735,-0.01102298405021429,-0.06862175464630127,0,-0.07348053902387619,0.03139270842075348,0.003887316444888711,0,-1.7590140104293823,-1.9032009840011597,-2.546595335006714,1],[7,0.08294683694839478,0.20258113741874695,0.0219253096729517,0,-0.008339579217135906,0.010844630189239979,-0.06865017116069794,0,-0.0734805315732956,0.028630990535020828,0.013449191115796566,0,-1.75895357131958,-1.1262668371200562,-3.0473852157592773,1],[7,0.08294684439897537,0.20258113741874695,0.021925317123532295,0,-0.00833958014845848,0.010844632983207703,-0.06865017116069794,0,-0.0734805315732956,0.028630990535020828,0.013449192978441715,0,-1.7591339349746704,-1.2030425071716309,-3.047384738922119,1],[7,0.07133117318153381,0.20556814968585968,-0.032459478825330734,0,-0.008392438292503357,-0.007988489232957363,-0.06903443485498428,0,-0.07506795227527618,0.026995951309800148,0.006002024281769991,0,-1.8328673839569092,-1.7450878620147705,-2.6150829792022705,1],[7,0.0713311955332756,0.20307111740112305,-0.0455411821603775,0,-0.00839243084192276,-0.012387583963572979,-0.0683821365237236,0,-0.07506794482469559,0.02732456475496292,0.004263060167431831,0,-1.8328580856323242,-2.0348875522613525,-2.490030288696289,1],[7,0.0713312178850174,0.2001706063747406,-0.056952688843011856,0,-0.008392423391342163,-0.01623501442372799,-0.06757213175296783,0,-0.07506794482469559,0.027521930634975433,0.0027109249494969845,0,-1.832859754562378,-2.293569326400757,-2.3641035556793213,1],[7,0.0713312178850174,0.2001706063747406,-0.05695269629359245,0,-0.008392422460019588,-0.01623501628637314,-0.06757213175296783,0,-0.07506794482469559,0.027521930634975433,0.0027109228540211916,0,-1.8328670263290405,-2.3753514289855957,-2.3641035556793213,1],[7,0.0597648024559021,0.2113976627588272,-0.011798543855547905,0,-0.008418288081884384,-0.0014976338716223836,-0.06947584450244904,0,-0.07638804614543915,0.022085877135396004,0.008779742754995823,0,-1.8835808038711548,-1.5977267026901245,-2.789052963256836,1],[7,0.059764787554740906,0.20961996912956238,-0.0297931507229805,0,-0.008418284356594086,-0.0074202390387654305,-0.06909466534852982,0,-0.07638803124427795,0.02275446429848671,0.006863228976726532,0,-1.8834450244903564,-1.9185035228729248,-2.6349644660949707,1],[7,0.0597648024559021,0.1883241832256317,-0.09675835818052292,0,-0.00841827318072319,-0.02962540090084076,-0.06286070495843887,0,-0.07638803869485855,0.023747503757476807,-0.000962034915573895,0,-1.8833879232406616,-2.767634630203247,-1.829935908317566,1],[7,0.0597648024559021,0.1883241832256317,-0.09675835818052292,0,-0.00841827318072319,-0.02962540090084076,-0.06286070495843887,0,-0.07638803869485855,0.023747505620121956,-0.0009620356722734869,0,-1.883579969406128,-2.828479766845703,-1.8299356698989868,1],[7,-0.07695954293012619,-0.20520591735839844,0.01917707361280918,0,0.014063743874430656,-0.011590506881475449,-0.0675860196352005,0,0.07320170104503632,-0.025619154796004295,0.019625790417194366,0,1.85321843624115,-1.4247955083847046,-1.8595707416534424,1],[7,-0.06391660869121552,-0.14062410593032837,0.15665103495121002,0,-0.012648873031139374,-0.04858757555484772,-0.048777591437101364,0,0.07517194002866745,-0.026489123702049255,0.006892555858939886,0,1.0084593296051025,-3.190079689025879,-0.7161590456962585,1],[7,-0.0701344758272171,-0.20332248508930206,-0.04627225920557976,0,0.06511715054512024,-0.01837773621082306,-0.017944814637303352,0,0.014536134898662567,-0.022190475836396217,0.07547372579574585,0,2.574122667312622,-2.794898509979248,0.9234377145767212,1],[7,-0.13435202836990356,-0.17318014800548553,-0.018925640732049942,0,0.00833179522305727,0.001130667980760336,-0.06949319690465927,0,0.0626298114657402,-0.04932069405913353,0.006706463638693094,0,0.9004050493240356,-2.8907859325408936,-2.9699580669403076,1],[7,0.09826283156871796,-0.15124763548374176,0.12597060203552246,0,0.002574835205450654,-0.04377284273505211,-0.05456473305821419,0,0.07151623070240021,0.029537854716181755,-0.020321069285273552,0,2.968214750289917,-2.517090320587158,-1.779543161392212,1],[7,0.09826324135065079,-0.1264200210571289,0.15087194740772247,0,0.0025747765321284533,-0.052783120423555374,-0.04590549319982529,0,0.07151616364717484,0.025450820103287697,-0.025252660736441612,0,2.9457013607025146,-2.8721563816070557,-1.2890721559524536,1],[7,0.09826285392045975,-0.17040173709392548,0.09852755069732666,0,0.002574854763224721,-0.033896543085575104,-0.06119147315621376,0,0.0715162381529808,0.03255345672369003,-0.015023438259959221,0,2.938929319381714,-2.3517022132873535,-2.227888584136963,1],[7,0.09826286137104034,-0.17040175199508667,0.09852752834558487,0,0.00257483939640224,-0.0338965468108654,-0.06119147688150406,0,0.07151622325181961,0.032553449273109436,-0.015023451298475266,0,2.968215227127075,-2.414379596710205,-2.227888822555542,1],[7,-0.06013735383749008,-0.21040703356266022,0.02263578400015831,0,0.0073102423921227455,-0.009508669376373291,-0.06896481662988663,0,0.07649825513362885,-0.020685136318206787,0.010960796847939491,0,1.8350235223770142,-3.0257325172424316,-2.4165894985198975,1],[7,-0.06013736501336098,-0.20795686542987823,0.039210282266139984,0,0.007310239598155022,-0.014934718608856201,-0.06799644231796265,0,0.07649827003479004,-0.019753195345401764,0.012562857009470463,0,1.835013747215271,-3.331655979156494,-2.1597890853881836,1],[7,-0.06013736501336098,-0.20999844372272491,-0.02615666575729847,0,0.007310237269848585,0.006539500318467617,-0.06930942833423615,0,0.07649827748537064,-0.022645700722932816,0.005931793246418238,0,1.8351619243621826,-2.634326457977295,-3.112757682800293,1],[7,-0.060137368738651276,-0.20999844372272491,-0.026156621053814888,0,0.007310236804187298,0.006539484951645136,-0.06930942833423615,0,0.07649827748537064,-0.022645700722932816,0.0059317974373698235,0,1.8350236415863037,-2.7272088527679443,-3.1127567291259766,1],[7,-0.06414997577667236,-0.20960761606693268,0.018692929297685623,0,0.0073882159776985645,-0.00842329952865839,-0.06909748166799545,0,0.07605617493391037,-0.022309063002467155,0.010851852595806122,0,1.9326027631759644,-3.0387747287750244,-2.4587864875793457,1],[7,-0.06414998322725296,-0.20719125866889954,0.03683174401521683,0,0.007388207130134106,-0.014394237659871578,-0.06810449808835983,0,0.07605618238449097,-0.021281981840729713,0.012748896144330502,0,1.9323904514312744,-3.3543343544006348,-2.175607919692993,1],[7,-0.06414998322725296,-0.1973184049129486,0.07314538210630417,0,0.007388208992779255,-0.026294076815247536,-0.06445182859897614,0,0.07605618238449097,-0.018671009689569473,0.016335556283593178,0,1.9323650598526,-3.8129866123199463,-1.5207993984222412,1],[7,-0.06414997577667236,-0.19731836020946503,0.07314537465572357,0,0.007388208992779255,-0.026294071227312088,-0.06445182114839554,0,0.07605618238449097,-0.018671007826924324,0.016335560008883476,0,1.9326026439666748,-3.888270378112793,-1.520799160003662,1],[7,-0.09697256237268448,-0.19659170508384705,0.018655570223927498,0,0.007936859503388405,-0.010440036654472351,-0.06876055151224136,0,0.0712338387966156,-0.033869192004203796,0.013364771381020546,0,1.6265641450881958,-3.340484619140625,-2.3728344440460205,1],[7,-0.09697257727384567,-0.19648729264736176,0.019724830985069275,0,0.007936873473227024,-0.01081397570669651,-0.06870272010564804,0,0.0712338387966156,-0.03379599377512932,0.013548855669796467,0,1.6269826889038086,-3.4610118865966797,-2.354038953781128,1],[7,-0.09697258472442627,-0.19699513912200928,-0.013756627216935158,0,0.007936875335872173,0.0009492886601947248,-0.06954211741685867,0,0.0712338387966156,-0.03559929504990578,0.007644005585461855,0,1.6273763179779053,-3.1143436431884766,-2.9222404956817627,1],[7,-0.09697257727384567,-0.19699512422084808,-0.013756628148257732,0,0.00793687254190445,0.0009492907556705177,-0.06954210996627808,0,0.071233831346035,-0.03559928759932518,0.0076440018601715565,0,1.6265641450881958,-3.1951904296875,-2.9222402572631836,1],[7,-0.20715399086475372,0.00039676015148870647,-0.07407616078853607,0,-0.00005598252755589783,-0.06999964267015457,-0.00021837881649844348,0,-0.026936594396829605,-0.0002134561655111611,0.07532985508441925,0,-0.053379401564598083,-3.7049708366394043,1.1864557266235352,1],[7,-0.19937144219875336,-0.05452768877148628,-0.07535231858491898,0,0.01908234879374504,-0.06732554733753204,-0.001770001370459795,0,-0.025852108374238014,-0.00930261891335249,0.0751354768872261,0,1.1166719198226929,-4.150649070739746,1.091115951538086,1],[7,-0.21264153718948364,-0.0440373420715332,0.0352775864303112,0,0.017756318673491478,-0.04576005041599274,0.04990798979997635,0,-0.00303117954172194,0.05838415399193764,0.054609667509794235,0,1.3843941688537598,-2.0521790981292725,3.999173164367676,1],[7,-0.1963946521282196,-0.09302469342947006,-0.03429103270173073,0,-0.012968933209776878,0.002034431789070368,0.0687580406665802,0,-0.03286398574709892,0.07246069610118866,-0.008342616260051727,0,-1.0711636543273926,1.0060666799545288,4.683206081390381,1],[7,-0.19639469683170319,-0.09302467107772827,-0.03429103270173073,0,-0.012968933209776878,0.002034429693594575,0.0687580555677414,0,-0.032863982021808624,0.07246069610118866,-0.008342611603438854,0,-1.0711642503738403,0.7594631910324097,4.683206558227539,1],[7,-0.20715399086475372,0.000621240702457726,-0.07409217208623886,0,-0.000055991757108131424,-0.06999868154525757,-0.00043059035670012236,0,-0.026936598122119904,-0.00044170531327836215,0.07534670829772949,0,-1.3171206712722778,-3.7087390422821045,1.180662989616394,1],[7,-0.19908778369426727,0.05793128162622452,-0.07355816662311554,0,-0.01919587515294552,-0.06730830669403076,-0.0010553550673648715,0,-0.026030810549855232,0.00624206755310297,0.07540782541036606,0,-2.4363534450531006,-3.7640011310577393,1.1457737684249878,1],[7,-0.1689700037240982,-0.0674559473991394,-0.12370925396680832,0,-0.01805453561246395,-0.04589581862092018,0.049685705453157425,0,-0.04689561575651169,0.0552176795899868,0.03395610302686691,0,-2.6647050380706787,-2.1374130249023438,3.4617152214050293,1],[7,-0.20928065478801727,-0.053839948028326035,0.0412854366004467,0,0.01303684338927269,0.0020406690891832113,0.06874512135982513,0,-0.019659899175167084,0.07755312323570251,0.001427330425940454,0,-0.25461241602897644,1.1423370838165283,4.9314494132995605,1],[7,-0.20928062498569489,-0.05383993685245514,0.04128572717308998,0,0.013036937452852726,0.002040671184659004,0.06874510645866394,0,-0.019659891724586487,0.07755312323570251,0.0014273538254201412,0,-0.25459548830986023,0.903041422367096,4.931441307067871,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[7,"Skin-7",318933686,["Armature/mixamorig:Hips","Armature/mixamorig:Hips/mixamorig:Spine","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head/mixamorig:HeadTop_End","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3/mixamorig:LeftHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3/mixamorig:LeftHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3/mixamorig:LeftHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3/mixamorig:LeftHandRing4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3/mixamorig:RightHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3/mixamorig:RightHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3/mixamorig:RightHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3/mixamorig:RightHandRing4","Armature/mixamorig:Hips/mixamorig:LeftUpLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase/mixamorig:LeftToe_End","Armature/mixamorig:Hips/mixamorig:RightUpLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase/mixamorig:RightToe_End"],[[[7,0.9878502488136292,-2.5319309315818828e-8,0.1554087996482849,0,3.481753493644272e-15,1,1.6292067073209182e-7,0,-0.1554087996482849,-1.6094122656795662e-7,0.9878502488136292,0,-0.628826916217804,2.8836634159088135,1.1649380922317505,1],[7,0.9878502488136292,-0.026753291487693787,0.15308871865272522,0,-1.087083756345919e-9,0.9850712418556213,0.17214784026145935,0,-0.1554087996482849,-0.1700562983751297,0.9731027483940125,0,-0.628826916217804,2.3905835151672363,1.6439628601074219,1],[7,0.9878502488136292,-0.02675328589975834,0.15308871865272522,0,2.6847091216808394e-10,0.9850712418556213,0.17214779555797577,0,-0.15540878474712372,-0.1700562685728073,0.9731027483940125,0,-0.628826916217804,2.0995137691497803,1.6439627408981323,1],[7,0.9878502488136292,-0.02675328589975834,0.1530887484550476,0,-8.233667220247654e-11,0.9850714206695557,0.17214779555797577,0,-0.1554088145494461,-0.1700562685728073,0.9731029272079468,0,-0.628826916217804,1.7668617963790894,1.6439629793167114,1],[7,0.9878502488136292,-2.89282606757979e-8,0.1554087996482849,0,6.831665462015465e-15,1.0000001192092896,1.8614294106100715e-7,0,-0.1554087996482849,-1.8388136879821104e-7,0.9878502488136292,0,-0.628826916217804,1.6548433303833008,1.3796826601028442,1],[7,0.9878502488136292,-2.5362552946717187e-8,0.1554087996482849,0,3.83861567410256e-15,1.0000001192092896,1.6319890505656076e-7,0,-0.1554087996482849,-1.6121609291985806e-7,0.9878502488136292,0,-0.628826916217804,1.1809957027435303,1.3527779579162598,1],[7,0.9878502488136292,-2.5362554723074027e-8,0.1554087996482849,0,3.4011657202513137e-15,1.0000001192092896,1.6319891926741548e-7,0,-0.1554087996482849,-1.6121610713071277e-7,0.9878502488136292,0,-0.628826916217804,-2.074651002883911,1.1679258346557617,1],[7,-0.1887119859457016,0.9730995893478394,-0.13215385377407074,0,-0.17110654711723328,-0.16509488224983215,-0.9713218808174133,0,-0.9670107960700989,-0.16068772971630096,0.1976591944694519,0,-1.6184979677200317,-1.2846081256866455,-1.2627676725387573,1],[7,-0.1387052685022354,0.6944578289985657,-0.7060377597808838,0,0.13706615567207336,-0.6926059126853943,-0.7081736922264099,0,-0.9808026552200317,-0.1950012892484665,0.0008814257453195751,0,-1.1496881246566772,-2.657050132751465,-0.2257556915283203,1],[7,-0.28164294362068176,0.9576728343963623,0.05949472635984421,0,-0.940508246421814,-0.2632499635219574,-0.21481022238731384,0,-0.1900559514760971,-0.11645504832267761,0.9748419523239136,0,-1.8709732294082642,-2.58886981010437,1.1175330877304077,1],[7,-0.42043596506118774,0.9069951176643372,0.02435784414410591,0,-0.08897119015455246,-0.014496242627501488,-0.9959287643432617,0,-0.902949333190918,-0.4208914637565613,0.08679119497537613,0,-0.8575129508972168,-2.889105796813965,-2.2095553874969482,1],[7,0.5469228625297546,0.5740804672241211,-0.60934978723526,0,-0.05939707159996033,-0.6994143128395081,-0.7122440934181213,0,-0.8350733518600464,0.42573612928390503,-0.34842702746391296,0,-2.8721516132354736,-2.306035041809082,-0.8683080077171326,1],[7,0.5469227433204651,0.6213420629501343,-0.5610789656639099,0,-0.05939725041389465,-0.6397103071212769,-0.7663176655769348,0,-0.8350732922554016,0.45244306325912476,-0.31296616792678833,0,-2.8458447456359863,-2.3255810737609863,-1.0592631101608276,1],[7,0.5469211339950562,0.7941436767578125,-0.26497769355773926,0,-0.059398550540208817,-0.27890366315841675,-0.9584803581237793,0,-0.8350743651390076,0.5399524569511414,-0.10536734014749527,0,-2.8505911827087402,-1.7897744178771973,-1.9392691850662231,1],[7,0.5469211339950562,0.7941438555717468,-0.2649776339530945,0,-0.0593985840678215,-0.278903603553772,-0.9584805369377136,0,-0.8350744843482971,0.5399525761604309,-0.1053672507405281,0,-2.8721535205841064,-1.8277519941329956,-1.939269781112671,1],[7,-0.10953224450349808,0.9845910668373108,-0.13631971180438995,0,-0.08895279467105865,-0.14630413055419922,-0.9852325320243835,0,-0.9899951815605164,-0.09578865766525269,0.10360714793205261,0,-1.6447211503982544,-2.9515390396118164,-1.7511415481567383,1],[7,-0.10953227430582047,0.9825766086578369,-0.1501513570547104,0,-0.08895278722047806,-0.16014376282691956,-0.9830775260925293,0,-0.9899951219558716,-0.09432228654623032,0.10494384914636612,0,-1.6446013450622559,-3.1020126342773438,-1.7076897621154785,1],[7,-0.10953221470117569,0.980596125125885,0.16258500516414642,0,-0.0889529138803482,0.15324266254901886,-0.9841769337654114,0,-0.9899951219558716,-0.12226146459579468,0.07044187933206558,0,-1.6445411443710327,-2.5264029502868652,-2.622495412826538,1],[7,-0.10953220725059509,0.980596125125885,0.1625850349664688,0,-0.0889529213309288,0.15324270725250244,-0.9841769337654114,0,-0.9899951219558716,-0.12226146459579468,0.07044187933206558,0,-1.644721508026123,-2.6031787395477295,-2.622495174407959,1],[7,-0.16538850963115692,0.9812435507774353,-0.09903480857610703,0,-0.08963502943515778,-0.11495773494243622,-0.9893183708190918,0,-0.9821468591690063,-0.15474486351013184,0.10696648061275482,0,-1.643796443939209,-2.9765024185180664,-1.8392781019210815,1],[7,-0.16538842022418976,0.9729001522064209,-0.16159255802631378,0,-0.08963491767644882,-0.17799930274486542,-0.9799399375915527,0,-0.9821469187736511,-0.14758633077144623,0.11664483696222305,0,-1.6437876224517822,-3.214160203933716,-1.637052297592163,1],[7,-0.165388286113739,0.9622044563293457,-0.21635496616363525,0,-0.08963482081890106,-0.23313356935977936,-0.9683051109313965,0,-0.9821469187736511,-0.1407533437013626,0.1248045489192009,0,-1.6437894105911255,-3.422715663909912,-1.4457987546920776,1],[7,-0.165388286113739,0.9622044563293457,-0.21635501086711884,0,-0.08963479846715927,-0.23313359916210175,-0.9683051109313965,0,-0.9821469187736511,-0.14075332880020142,0.1248045340180397,0,-1.643796682357788,-3.504497766494751,-1.4457988739013672,1],[7,-0.21944577991962433,0.9756247401237488,8.555619501748879e-7,0,-0.09002595394849777,-0.020248517394065857,-0.995733916759491,0,-0.9714624881744385,-0.21850955486297607,0.0922749862074852,0,-1.6221579313278198,-2.888234853744507,-2.1407864093780518,1],[7,-0.21944575011730194,0.9720666408538818,-0.08324495702981949,0,-0.0900259017944336,-0.10513625293970108,-0.9903745055198669,0,-0.9714623093605042,-0.20983923971652985,0.11058290302753448,0,-1.6220223903656006,-3.148991584777832,-1.8789489269256592,1],[7,-0.21944572031497955,0.8912848234176636,-0.39680591225624084,0,-0.09002574533224106,-0.42348331212997437,-0.9014196395874023,0,-0.9714623689651489,-0.16208988428115845,0.17317019402980804,0,-1.6219654083251953,-3.6829185485839844,-0.7128339409828186,1],[7,-0.21944572031497955,0.8912847638130188,-0.39680591225624084,0,-0.09002574533224106,-0.423483282327652,-0.9014196991920471,0,-0.9714623689651489,-0.16208988428115845,0.17317020893096924,0,-1.622157335281372,-3.7437639236450195,-0.7128337025642395,1],[7,0.13220524787902832,-0.9730996489524841,0.1886758953332901,0,0.17104780673980713,-0.16509462893009186,-0.971332311630249,0,0.9763526320457458,0.16068780422210693,0.14462019503116608,0,1.6549807786941528,-0.023532768711447716,-1.4707692861557007,1],[7,0.19393891096115112,-0.7235234379768372,0.6624965071678162,0,-0.21053379774093628,-0.6902799606323242,-0.6922349333763123,0,0.958156168460846,-0.005226618144661188,-0.28619834780693054,0,0.9726766347885132,-1.7942944765090942,-1.1683824062347412,1],[7,-0.18771076202392578,-0.9455949664115906,0.2657339572906494,0,0.9215372204780579,-0.2631678879261017,-0.28550320863723755,0,0.3399031460285187,0.19129164516925812,0.9208003282546997,0,2.25862717628479,-1.3641031980514526,0.8380593061447144,1],[7,-0.16054219007492065,-0.986183226108551,-0.04085034504532814,0,0.0905456393957138,0.026497850194573402,-0.9955399036407471,0,0.9828670620918274,-0.16352492570877075,0.08504058420658112,0,1.1398736238479614,-1.6239557266235352,-2.268674612045288,1],[7,0.8203970789909363,-0.43015605211257935,0.3767155110836029,0,0.015162323601543903,-0.6422328948974609,-0.766359806060791,0,0.5715932846069336,0.6344310641288757,-0.5203639268875122,0,1.9286919832229614,-1.4821985960006714,-1.828473687171936,1],[7,0.8203983902931213,-0.35626205801963806,0.4472406208515167,0,0.015161515213549137,-0.7683440446853638,-0.6398577690124512,0,0.5715915560722351,0.5317189693450928,-0.6249467134475708,0,1.9061771631240845,-1.8624855279922485,-1.5213595628738403,1],[7,0.8203972578048706,-0.48775652050971985,0.298399418592453,0,0.015162497758865356,-0.503123939037323,-0.8640815615653992,0,0.5715932250022888,0.7134142518043518,-0.4053659737110138,0,1.8994060754776,-1.3234797716140747,-2.100794792175293,1],[7,0.8203972578048706,-0.4877565801143646,0.29839932918548584,0,0.015162373892962933,-0.5031240582466125,-0.8640815615653992,0,0.571593165397644,0.7134142518043518,-0.40536606311798096,0,1.928692102432251,-1.3861567974090576,-2.100794792175293,1],[7,0.2185315638780594,-0.9641543626785278,0.150499626994133,0,0.07414817065000534,-0.13737502694129944,-0.9877399802207947,0,0.9730085134506226,0.22701165080070496,0.0414695218205452,0,1.5851479768753052,-1.6482402086257935,-1.9760446548461914,1],[7,0.21853160858154297,-0.9492265582084656,0.226302832365036,0,0.07414812594652176,-0.2150852233171463,-0.973776638507843,0,0.9730086922645569,0.22958087921142578,0.023380456492304802,0,1.585137963294983,-1.9236291646957397,-1.8295997381210327,1],[7,0.21853160858154297,-0.9729952216148376,-0.07432689517736435,0,0.07414808869361877,0.09250448644161224,-0.9929477572441101,0,0.9730086922645569,0.2114792764186859,0.09236089885234833,0,1.5852863788604736,-1.3943508863449097,-2.3684284687042236,1],[7,0.21853159368038177,-0.9729952216148376,-0.07432668656110764,0,0.07414808124303818,0.09250427037477493,-0.9929478168487549,0,0.9730086326599121,0.21147926151752472,0.09236083924770355,0,1.5851480960845947,-1.4872331619262695,-2.3684277534484863,1],[7,0.19987989962100983,-0.9705997705459595,0.134103924036026,0,0.07524825632572174,-0.12125565856695175,-0.9897650480270386,0,0.9769265651702881,0.2079252302646637,0.048799388110637665,0,1.706917405128479,-1.6648375988006592,-1.994712471961975,1],[7,0.19987988471984863,-0.9552802443504333,0.21791689097881317,0,0.075248122215271,-0.20678219199180603,-0.9754893183708191,0,0.9769265651702881,0.21137849986553192,0.030551454052329063,0,1.7067052125930786,-1.9452751874923706,-1.8326478004455566,1],[7,0.1998799443244934,-0.9011933207511902,0.3845762312412262,0,0.07524815201759338,-0.3772188723087311,-0.9230624437332153,0,0.9769266247749329,0.21344025433063507,-0.007585353218019009,0,1.7066799402236938,-2.365373134613037,-1.4342881441116333,1],[7,0.19987992942333221,-0.9011932015419006,0.3845762312412262,0,0.07524815201759338,-0.3772188425064087,-0.9230623841285706,0,0.9769265651702881,0.21344022452831268,-0.007585349027067423,0,1.706917405128479,-2.440656900405884,-1.4342880249023438,1],[7,0.04008517414331436,-0.9880208373069763,0.14902380108833313,0,0.08340935409069061,-0.14531435072422028,-0.9858635663986206,0,0.995708703994751,0.051948487758636475,0.07658524811267853,0,1.6076390743255615,-1.9418481588363647,-1.928468942642212,1],[7,0.040085069835186005,-0.9871954917907715,0.1543969362974167,0,0.08340956270694733,-0.15067581832408905,-0.9850582480430603,0,0.9957086443901062,0.05236431956291199,0.076301708817482,0,1.6080573797225952,-2.059978723526001,-1.9172890186309814,1],[7,0.04008503258228302,-0.9990893602371216,-0.014616238884627819,0,0.08340957760810852,0.017922749742865562,-0.996354341506958,0,0.9957086443901062,0.03871976584196091,0.08405207097530365,0,1.6084511280059814,-1.8072444200515747,-2.2550554275512695,1],[7,0.040085043758153915,-0.999089241027832,-0.014616254717111588,0,0.08340956270694733,0.017922766506671906,-0.9963542222976685,0,0.9957085847854614,0.038719773292541504,0.08405204862356186,0,1.6076388359069824,-1.8880913257598877,-2.2550551891326904,1],[7,-0.9878502488136292,-0.005211249925196171,0.15532433986663818,0,6.545441522121109e-8,-0.9994377493858337,-0.033532727509737015,0,0.1554088443517685,-0.033124689012765884,0.9873131513595581,0,1.260697603225708,-3.0584778785705566,1.0902724266052246,1],[7,-0.9487956166267395,-0.2785724699497223,0.14894625544548035,0,0.2732219994068146,-0.9603385329246521,-0.05567329749464989,0,0.15854494273662567,-0.012126963585615158,0.9872955083847046,0,2.203956365585327,-3.167590379714966,1.0175615549087524,1],[7,-0.8652448654174805,0.1701611876487732,0.47159552574157715,0,0.24546906352043152,-0.6764082312583923,0.6944299340248108,0,0.43714937567710876,0.7166164517402649,0.5434859395027161,0,2.4040074348449707,-1.7783658504486084,2.9796459674835205,1],[7,-0.9814165830612183,0.06271705031394958,-0.18135114014148712,0,-0.18177944421768188,-0.001145054236985743,0.9833387136459351,0,0.06146332249045372,0.9980490207672119,0.01252421922981739,0,0.34305810928344727,1.0119143724441528,4.2908477783203125,1],[7,-0.9814168214797974,0.06271720677614212,-0.18135111033916473,0,-0.18177944421768188,-0.001145084504969418,0.9833389520645142,0,0.06146348640322685,0.9980490803718567,0.012524276040494442,0,0.3430577218532562,0.7653107047080994,4.290848255157471,1],[7,-0.9878502488136292,-0.0056817359291017056,0.1553446501493454,0,-7.01132378821967e-8,-0.9993318915367126,-0.03656969591975212,0,0.1554088592529297,-0.03611617907881737,0.9874420762062073,0,-0.003043630626052618,-3.0619571208953857,1.0864168405532837,1],[7,-0.9517501592636108,0.26322272419929504,0.1577921211719513,0,-0.2732798159122467,-0.9608592987060547,-0.0454898327589035,0,0.13960634171962738,-0.086394302546978,0.9866832494735718,0,-0.9954947233200073,-3.500361204147339,1.053973913192749,1],[7,-0.9563789963722229,0.05774907022714615,-0.28645700216293335,0,-0.24814434349536896,-0.6782126426696777,0.6918622851371765,0,-0.15429139137268066,0.7327994704246521,0.6628994941711426,0,-1.2597298622131348,-1.7130365371704102,3.4522440433502197,1],[7,-0.9517459869384766,0.24955910444259644,0.17870235443115234,0,0.18423277139663696,-0.0012061882298439741,0.9828833937644958,0,0.24544119834899902,0.9686192870140076,-0.044817663729190826,0,0.9014009237289429,0.8996763229370117,4.060365200042725,1],[7,-0.9517457485198975,0.2495591640472412,0.1787036657333374,0,0.1842341274023056,-0.0012061619199812412,0.9828831553459167,0,0.24544118344783783,0.9686192870140076,-0.04481803625822067,0,0.9014166593551636,0.6603806018829346,4.0603556632995605,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[7,"Skin-1",1181843058,["Armature/mixamorig:Hips","Armature/mixamorig:Hips/mixamorig:Spine","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head/mixamorig:HeadTop_End","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3/mixamorig:LeftHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3/mixamorig:LeftHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3/mixamorig:LeftHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3/mixamorig:LeftHandRing4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3/mixamorig:RightHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3/mixamorig:RightHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3/mixamorig:RightHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3/mixamorig:RightHandRing4","Armature/mixamorig:Hips/mixamorig:LeftUpLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase/mixamorig:LeftToe_End","Armature/mixamorig:Hips/mixamorig:RightUpLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase/mixamorig:RightToe_End"],[[[7,-0.013943502679467201,-0.9999026656150818,-1.6391281576488836e-7,0,0.9999026656150818,-0.013943502679467201,-3.7252831930345565e-9,0,1.4394021530250711e-9,-1.639488402815914e-7,1,0,-0.9329470992088318,0.9012560844421387,-0.22564908862113953,1],[7,-0.013943502679467201,-0.9849753379821777,-0.17213109135627747,0,0.9999026656150818,-0.01373534370213747,-0.002400345169007778,0,1.0590791577058667e-9,-0.17214787006378174,0.9850711226463318,0,-0.9329470992088318,0.6771577596664429,-0.06713128089904785,1],[7,-0.013943502679467201,-0.9849753379821777,-0.17213104665279388,0,0.9999026656150818,-0.01373534370213747,-0.002400344703346491,0,1.2144300010064057e-9,-0.17214782536029816,0.9850711226463318,0,-0.9329470992088318,0.3860878050327301,-0.06713135540485382,1],[7,-0.013943502679467201,-0.9849755167961121,-0.17213104665279388,0,0.9999026656150818,-0.01373534556478262,-0.002400344470515847,0,1.1627150353632487e-9,-0.17214782536029816,0.9850713014602661,0,-0.9329470992088318,0.05343550443649292,-0.06713130325078964,1],[7,-0.013943502679467201,-0.9999027848243713,-1.8713282656790398e-7,0,0.9999026656150818,-0.01394350454211235,-4.049082846790952e-9,0,1.4394021530250711e-9,-1.8717113903221616e-7,1,0,-0.9329470992088318,-0.3275640904903412,-0.010904587805271149,1],[7,-0.013943502679467201,-0.9999027848243713,-1.6419102166764787e-7,0,0.9999026656150818,-0.01394350454211235,-3.729162756371807e-9,0,1.4394021530250711e-9,-1.6422710302776977e-7,1,0,-0.9329470992088318,-0.8014117479324341,-0.037809111177921295,1],[7,-0.013943502679467201,-0.9999027848243713,-1.641910358785026e-7,0,0.9999026656150818,-0.01394350454211235,-3.7291632004610165e-9,0,1.4394024860919785e-9,-1.642271172386245e-7,1,0,-0.9329470992088318,-4.057058334350586,-0.2226613163948059,1],[7,0.17159375548362732,0.15132704377174377,0.973475992679596,0,-0.03374785929918289,0.9884549379348755,-0.14770685136318207,0,-0.9845893383026123,-0.007507159374654293,0.17471978068351746,0,0.1008518636226654,-1.246821641921997,0.46886909008026123,1],[7,-0.13726763427257538,0.6825503706932068,0.7178317904472351,0,0.013492637313902378,0.725912868976593,-0.6876541376113892,0,-0.990442156791687,-0.08470723032951355,-0.1088537648320198,0,-0.04879835620522499,-1.3840794563293457,1.5416570901870728,1],[7,0.9438842535018921,0.24978093802928925,0.21608223021030426,0,-0.23554649949073792,0.9677122831344604,-0.08972291648387909,0,-0.23151658475399017,0.03379063680768013,0.9722438454627991,0,0.3910713791847229,-2.407202959060669,0.21958501636981964,1],[7,0.09279701858758926,0.0010897513711825013,0.9956843852996826,0,-0.2737341523170471,0.9614941477775574,0.024459488689899445,0,-0.9573181867599487,-0.2748226821422577,0.08952213078737259,0,0.733731746673584,-2.770580291748047,-0.3629230260848999,1],[7,0.050048403441905975,0.6923613548278809,0.7198129892349243,0,0.6708186268806458,0.510645866394043,-0.5378132462501526,0,-0.7399308085441589,0.5097807049751282,-0.43889203667640686,0,-1.9292420148849487,-1.7807519435882568,1.3205636739730835,1],[7,0.050048552453517914,0.6320700645446777,0.7732932567596436,0,0.6708185076713562,0.5523461103439331,-0.49488991498947144,0,-0.7399307489395142,0.5435080528259277,-0.3963603377342224,0,-1.9029346704483032,-1.9784927368164062,1.1648346185684204,1],[7,0.05004987120628357,0.2691079378128052,0.9618085622787476,0,0.6708170771598816,0.7044023871421814,-0.23199482262134552,0,-0.7399320602416992,0.6568090915679932,-0.14526700973510742,0,-1.9076762199401855,-2.3632848262786865,0.2374618649482727,1],[7,0.05004989728331566,0.2691078782081604,0.9618087410926819,0,0.6708170771598816,0.7044025659561157,-0.23199476301670074,0,-0.7399321794509888,0.6568092107772827,-0.14526690542697906,0,-1.9292383193969727,-2.4012627601623535,0.2374613732099533,1],[7,0.08830758184194565,0.13252043724060059,0.9872388243675232,0,0.04688838869333267,0.9894587993621826,-0.13701263070106506,0,-0.9949892163276672,0.058389272540807724,0.08116306364536285,0,-0.09864538162946701,-3.0430233478546143,0.13497701287269592,1],[7,0.08830756694078445,0.1463896930217743,0.9852774739265442,0,0.04688834026455879,0.9874340891838074,-0.15091268718242645,0,-0.9949891567230225,0.059524741023778915,0.08033396303653717,0,-0.09852561354637146,-3.1669652462005615,0.17952844500541687,1],[7,0.0883076936006546,-0.16699950397014618,0.9819943904876709,0,0.046888407319784164,0.9854497313499451,0.16337065398693085,0,-0.9949891567230225,0.031617265194654465,0.09485316276550293,0,-0.09846509993076324,-3.1745331287384033,-0.8488728404045105,1],[7,0.0883077010512352,-0.16699953377246857,0.9819943904876709,0,0.046888403594493866,0.9854497313499451,0.16337068378925323,0,-0.9949891567230225,0.031617261469364166,0.09485317021608353,0,-0.09864547848701477,-3.2513089179992676,-0.8488725423812866,1],[7,0.08977612107992172,0.10109547525644302,0.9908179640769958,0,-0.009493938647210598,0.9948766827583313,-0.1006493866443634,0,-0.9959168434143066,-0.00037085311487317085,0.09027598053216934,0,-0.07792675495147705,-3.0501980781555176,0.03122539073228836,1],[7,0.08977601677179337,0.1642613559961319,0.9823230504989624,0,-0.00949384830892086,0.9864019751548767,-0.1640757918357849,0,-0.9959168434143066,0.005404043942689896,0.09011472761631012,0,-0.07791802287101746,-3.168067216873169,0.2343350648880005,1],[7,0.08977590501308441,0.21955235302448273,0.9714614152908325,0,-0.009493713267147541,0.975544273853302,-0.21959775686264038,0,-0.9959168434143066,0.01049181167036295,0.08966474235057831,0,-0.07792013138532639,-3.2708628177642822,0.4199870526790619,1],[7,0.08977588266134262,0.21955236792564392,0.9714614152908325,0,-0.009493713267147541,0.975544273853302,-0.21959778666496277,0,-0.9959168434143066,0.010491808876395226,0.08966471999883652,0,-0.07792748510837555,-3.352644920349121,0.4199869632720947,1],[7,0.09093476086854935,0.006334705278277397,0.9958369135856628,0,-0.06454405188560486,0.9979146122932434,-0.0004540907684713602,0,-0.9937633275985718,-0.06423404067754745,0.09115400910377502,0,-0.04176287353038788,-3.0622007846832275,-0.28923308849334717,1],[7,0.09093470126390457,0.09128198027610779,0.9916644096374512,0,-0.06454405188560486,0.994236409664154,-0.08560013771057129,0,-0.9937631487846375,-0.05622202530503273,0.0963023453950882,0,-0.04162755608558655,-3.1643378734588623,-0.019304577261209488,1],[7,0.09093454480171204,0.4108142554759979,0.9071727991104126,0,-0.06454401463270187,0.9114627838134766,-0.406287282705307,0,-0.9937632083892822,-0.02160702645778656,0.10939908772706985,0,-0.041570838540792465,-3.0887811183929443,1.0494129657745361,1],[7,0.09093454480171204,0.41081422567367554,0.9071728587150574,0,-0.06454400718212128,0.9114627242088318,-0.406287282705307,0,-0.9937632083892822,-0.021607017144560814,0.10939910262823105,0,-0.041762929409742355,-3.1496262550354004,1.0494132041931152,1],[7,-0.17073646187782288,0.1788303405046463,0.9689523577690125,0,-0.023517755791544914,-0.9838510155677795,0.17743608355522156,0,0.9850360751152039,0.007507226895540953,0.1721849888563156,0,-0.04745623841881752,0.5932508707046509,0.1655207872390747,1],[7,0.20991824567317963,0.7001672983169556,0.6824221014976501,0,0.04560811072587967,-0.7042261362075806,0.7085092067718506,0,0.976654589176178,-0.11760503053665161,-0.1797633022069931,0,0.018938466906547546,-0.0452209897339344,0.241328626871109,1],[7,-0.9181254506111145,0.27658143639564514,0.28381049633026123,0,-0.25108030438423157,-0.9600713849067688,0.12337417155504227,0,0.30660152435302734,0.042013730853796005,0.9509102702140808,0,0.0778668150305748,-0.607699453830719,0.04540621489286423,1],[7,-0.0861956849694252,-0.013265837915241718,0.9961899518966675,0,-0.31257006525993347,-0.9490652680397034,-0.039683546870946884,0,0.9459757804870605,-0.3147996962070465,0.07765886187553406,0,-0.260402113199234,-0.9501832723617554,-0.3868086338043213,1],[7,-0.025222474709153175,0.6494702100753784,0.7599687576293945,0,0.7213172316551208,-0.514519989490509,0.46364927291870117,0,0.6921454668045044,0.5598728656768799,-0.4554966986179352,0,0.7166929841041565,-0.8283684849739075,0.18640251457691193,1],[7,-0.025221651419997215,0.7743286490440369,0.6322810053825378,0,0.7213187217712402,-0.42381173372268677,0.5477983951568604,0,0.6921440362930298,0.4698924124240875,-0.5478485822677612,0,0.6941813230514526,-0.8605799078941345,0.34503135085105896,1],[7,-0.025222640484571457,0.5113392472267151,0.8590088486671448,0,0.7213174104690552,-0.5856282711029053,0.3697848618030548,0,0.6921454071998596,0.6289448142051697,-0.35406693816185,0,0.6874067187309265,-1.0204330682754517,-0.004277990199625492,1],[7,-0.02522253803908825,0.5113393664360046,0.8590088486671448,0,0.7213173508644104,-0.58562833070755,0.3697848320007324,0,0.6921454071998596,0.6289447546005249,-0.3540670573711395,0,0.7166929841041565,-1.0831098556518555,-0.004277821630239487,1],[7,-0.07504256814718246,0.15113390982151031,0.9856606721878052,0,0.06362219154834747,-0.9857080578804016,0.1559850573539734,0,0.9951484203338623,0.07441543787717819,0.06435464322566986,0,0.03465075418353081,-1.1790026426315308,-0.15068645775318146,1],[7,-0.07504251599311829,0.2286365032196045,0.9706153869628906,0,0.06362220644950867,-0.9702787399291992,0.23347622156143188,0,0.9951485991477966,0.07927335053682327,0.05826583877205849,0,0.0346405990421772,-1.3114570379257202,-0.04708332568407059,1],[7,-0.0750424861907959,-0.07863509654998779,0.9940751194953918,0,0.06362222135066986,-0.9952324032783508,-0.07392381876707077,0,0.9951485991477966,0.057697843760252,0.0796876773238182,0,0.03478896617889404,-1.3556588888168335,-0.4841192662715912,1],[7,-0.0750424787402153,-0.07863488048315048,0.9940751194953918,0,0.06362220644950867,-0.9952324032783508,-0.07392361015081406,0,0.9951485991477966,0.057697851210832596,0.07968765497207642,0,0.034650664776563644,-1.4485406875610352,-0.48411861062049866,1],[7,-0.07587715238332748,0.1350635439157486,0.987927258014679,0,0.04457474872469902,-0.98933345079422,0.1386793702840805,0,0.9961202144622803,0.05455922335386276,0.06904742121696472,0,0.1586766391992569,-1.198909044265747,-0.16659313440322876,1],[7,-0.07587701827287674,0.22037819027900696,0.9724589586257935,0,0.04457474872469902,-0.9735456109046936,0.22410251200199127,0,0.996120274066925,0.06035134941339493,0.0640464648604393,0,0.15846458077430725,-1.3222919702529907,-0.05191671848297119,1],[7,-0.07587704807519913,0.390057772397995,0.9176589846611023,0,0.04457478225231171,-0.9180648922920227,0.39391615986824036,0,0.9961203336715698,0.07079364359378815,0.052273333072662354,0,0.15843909978866577,-1.4351872205734253,0.20701204240322113,1],[7,-0.07587704807519913,0.3900577425956726,0.9176589250564575,0,0.04457478225231171,-0.9180647730827332,0.39391615986824036,0,0.996120274066925,0.07079363614320755,0.05227333679795265,0,0.1586766541004181,-1.5104713439941406,0.20701205730438232,1],[7,-0.08179572969675064,0.15902186930179596,0.9838809370994568,0,-0.11629555374383926,-0.9819678664207458,0.14904437959194183,0,0.9898406863212585,-0.10222980380058289,0.09881436824798584,0,0.10084575414657593,-1.2123349905014038,-0.1526462882757187,1],[7,-0.08179593831300735,0.16437233984470367,0.9830010533332825,0,-0.11629565805196762,-0.981142520904541,0.1543845534324646,0,0.9898406267166138,-0.10169076919555664,0.09936930984258652,0,0.10126388818025589,-1.320814847946167,-0.14546240866184235,1],[7,-0.08179595321416855,-0.004075548145920038,0.9966408014297485,0,-0.1162957027554512,-0.993121325969696,-0.013605741783976555,0,0.9898406267166138,-0.11701798439025879,0.08075937628746033,0,0.10165755450725555,-1.3780694007873535,-0.38381439447402954,1],[7,-0.08179593831300735,-0.004075570497661829,0.996640682220459,0,-0.11629568040370941,-0.9931212067604065,-0.013605759479105473,0,0.989840567111969,-0.1170179471373558,0.08075935393571854,0,0.10084548592567444,-1.4589163064956665,-0.38381442427635193,1],[7,0.013943436555564404,0.9993404746055603,0.033529460430145264,0,-0.9999026656150818,0.013935593888163567,0.00046760382247157395,0,4.246131979357415e-8,-0.03353210166096687,0.9994562864303589,0,1.5648175477981567,-1.0305556058883667,-0.2330828458070755,1],[7,-0.2597830891609192,0.9640558958053589,0.05575568974018097,0,-0.9656232595443726,-0.25988614559173584,-0.005520923994481564,0,0.009167484939098358,-0.05527222529053688,0.9984476566314697,0,1.9421063661575317,-1.1038302183151245,-0.2585841715335846,1],[7,-0.23257994651794434,0.6755513548851013,-0.6996804475784302,0,-0.9260020852088928,0.06615123897790909,0.37168335914611816,0,0.29737141728401184,0.7343542575836182,0.6101727485656738,0,1.7844691276550293,-1.4758838415145874,0.638512372970581,1],[7,0.19541308283805847,0.002443787408992648,-0.9807178974151611,0,-0.9764146208763123,-0.09312550723552704,-0.19478771090507507,0,-0.09180421382188797,0.9956697225570679,-0.015811510384082794,0,1.1288280487060547,-0.3420519232749939,2.4185311794281006,1],[7,0.19541308283805847,0.0024438160471618176,-0.9807181358337402,0,-0.9764148592948914,-0.0931253582239151,-0.19478769600391388,0,-0.09180409461259842,0.9956697821617126,-0.01581145077943802,0,1.128827452659607,-0.5886557102203369,2.4185311794281006,1],[7,0.013943571597337723,0.9992346167564392,0.03656613081693649,0,-0.9999026656150818,0.013934253714978695,0.0005099609843455255,0,4.8939057251118356e-8,-0.036560364067554474,0.999586820602417,0,0.30107662081718445,-1.030033826828003,-0.2310994416475296,1],[7,0.2866652309894562,0.9569529294967651,0.04545004293322563,0,-0.9579785466194153,0.2868221402168274,0.0031697640661150217,0,-0.010000207461416721,-0.04443749040365219,0.9992175102233887,0,-0.14730873703956604,-1.6169147491455078,-0.24611663818359375,1],[7,0.2609591484069824,0.6789391040802002,-0.6864127516746521,0,-0.9172313213348389,-0.047373827546834946,-0.39560645818710327,0,-0.3010464906692505,0.7328708171844482,0.6103274822235107,0,-0.06914729624986649,-1.3703784942626953,1.3493671417236328,1],[7,-0.17057357728481293,-0.00013243644207250327,-0.9853463172912598,0,-0.9807997345924377,0.09600253403186798,0.16977353394031525,0,0.09454946219921112,0.9956344962120056,-0.016501227393746376,0,0.7022260427474976,-0.5116426944732666,2.079031467437744,1],[7,-0.17057491838932037,-0.00013246471644379199,-0.9853460788726807,0,-0.9807995557785034,0.09600258618593216,0.1697748750448227,0,0.09454947710037231,0.9956344962120056,-0.01650139130651951,0,0.7022389769554138,-0.7509385347366333,2.079022169113159,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[43,"proto",{"nested":{"MessageWrapper":{"fields":{"uid":{"type":"string","id":1},"connector":{"type":"string","id":2},"worker":{"type":"string","id":3},"msg":{"type":"bytes","id":4},"error":{"type":"string","id":5}}},"ReqMessage":{"fields":{"timestamp":{"type":"int64","id":1},"cmd":{"type":"CMD","id":2},"body":{"type":"bytes","id":3}}},"ResMessage":{"fields":{"timestamp":{"type":"int64","id":1},"cmd":{"type":"CMD","id":2},"errorCode":{"type":"ERROR","id":3},"errorMsg":{"type":"string","id":4},"body":{"type":"bytes","id":5}}},"ReqLogin":{"fields":{"token":{"type":"string","id":1},"api":{"type":"string","id":2}}},"ResLogin":{"fields":{"userId":{"type":"string","id":1}}},"ReqRename":{"fields":{"displayName":{"type":"string","id":1}}},"ResRename":{"fields":{"userId":{"type":"string","id":1},"displayName":{"type":"string","id":2}}},"ReqPing":{"fields":{"id":{"type":"int32","id":1},"sendAt":{"type":"int64","id":2}}},"ResPing":{"fields":{"id":{"type":"int32","id":1},"sendAt":{"type":"int64","id":2}}},"ReqChat":{"fields":{"text":{"type":"string","id":1}}},"ResChat":{"fields":{"sender":{"type":"string","id":1},"text":{"type":"string","id":2}}},"ReqNewGame":{"fields":{}},"ResNewGame":{"fields":{"userId":{"type":"string","id":1},"roomId":{"type":"string","id":2}}},"ReqJoinGame":{"fields":{"roomId":{"type":"string","id":1}}},"ResJoinGame":{"fields":{"roomId":{"type":"string","id":1},"blackId":{"type":"string","id":2},"whiteId":{"type":"string","id":3}}},"ReqMove":{"fields":{"position":{"type":"string","id":1}}},"ResMove":{"fields":{"userId":{"type":"string","id":1},"position":{"type":"string","id":2},"winner":{"type":"string","id":3}}},"CMD":{"values":{"CMD_UNKNOW":0,"CMD_LOGIN":100,"CMD_RENAME":101,"CMD_PING":102,"CMD_CHAT":201,"CMD_NEW_GAME":300,"CMD_JOIN_GAME":301,"CMD_MOVE":302}},"ERROR":{"values":{"ERROR_NONE":0,"ERROR_INVALID_ID":1,"ERROR_ROOM_IS_FULL":2,"ERROR_ROOM_INVALID_ID":3,"ERROR_POSITION_INVALID":4,"ERROR_UNSUPPORTED_CMD":127}},"USER_STATUS":{"values":{"USER_STATUS_DISCONNECTED":0,"USER_STATUS_CONNECTED":1}}}}]],0,0,[],[],[]],[[[44,"main"],[11,["d3Aqrq/w9cK4U90yTNnpMG"]],[34,"Starts",[-1,-2,-3,-4,-5,-6]],[45,"main",[-9,-10,-11,-12,-13],[40,[[46,["animation"],-8,-7,[11,["d3Aqrq/w9cK4U90yTNnpMG"]]]]],[47,[48],[49,[4,4283190348]],[50],[51]]],[35,"Player",[-17],[[[52,false,-14],[53,-15,[1,0,1,0],[1,1,2,1]],-16],4,4,1]],[38,"GameMgr","81aX5210dHIJT+p6pQgtyv",3,[-19,4,-20,2],[[55,-18]]],[39,"Canvas",33554432,"3cNCJ9DxxMdYaYawtfmEnw",3,[-26],[[56,-21,[5,750,1334]],[57,-23,-22],[58,45,-24],[59,-25]],[1,375,667,0]],[27,"Main Camera","c9DMICJLFO5IeO07EPon7U",3,[[60,1822425087,-27,[4,4289855378]],[62,-28,4]],[1,0,4.776,10.695],[3,-0.17364817766693033,0,0,0.984807753012208],[1,-20,0,0]],[28,"Ground",5,[[9,"Plane<ModelComponent>",-29,[0],[2],1],[54,-30,[1,10,0.001,10]]],[1,0,0,-34.936],[1,1,1,10]],[36,"Target",5,[-31,-32],[1,0,0,-49.833],[1,2,2,2]],[29,0,null,4,[41,"11qOJKHTNWHaV8U/ZSjwY+",-33,[63,"94lkhvjO1Dkpbh5eUwxVuQ",null,[[64,"momo",["_name"],[11,["11qOJKHTNWHaV8U/ZSjwY+"]]],[14,["_lpos"],[11,["11qOJKHTNWHaV8U/ZSjwY+"]],[1,0,0,0]],[14,["_lrot"],[11,["11qOJKHTNWHaV8U/ZSjwY+"]],[3,0,1,0,6.123233995736766e-17]],[14,["_euler"],[11,["11qOJKHTNWHaV8U/ZSjwY+"]],[1,0,180,0]],[14,["_lscale"],[11,["11qOJKHTNWHaV8U/ZSjwY+"]],[1,0.3,0.3,0.3]],[19,6,["_clips","length"],1],[12,["_clips","0"],1,19],[12,["_clips","1"],1,20],[12,["_clips","2"],1,21],[12,["_clips","3"],1,22],[12,["_clips","4"],1,23],[12,["_clips","5"],1,24],[12,["_defaultClip"],1,25],[19,true,["playOnLoad"],1]]],18]],[30,"Main Light","c0y6F5f+pAvI805TdmxIjx",3,[[65,10986,100000,-34,[66]]],[3,-0.24999999999999997,-0.24999999999999997,-0.06698729810778066,0.9330127018922194],[1,-30,-30,0]],[10,"Cube",9,[[9,"Cube<ModelComponent>",-35,[2],[2],3]],[1,0,0.5,0]],[10,"Sphere",9,[[9,"Sphere<ModelComponent>",-36,[4],[2],5]],[1,0,1.27,0]],[10,"1",2,[[9,"Cube<ModelComponent>",-37,[6],[2],7]],[1,-2,-0.45,0]],[10,"2",2,[[9,"Cube<ModelComponent>",-38,[8],[2],9]],[1,0,-0.45,0]],[10,"3",2,[[9,"Cube<ModelComponent>",-39,[10],[2],11]],[1,2,-0.45,0]],[10,"4",2,[[9,"Cube<ModelComponent>",-40,[12],[2],13]],[1,-2,-0.45,2]],[10,"5",2,[[9,"Cube<ModelComponent>",-41,[14],[2],15]],[1,0,-0.45,2]],[10,"6",2,[[9,"Cube<ModelComponent>",-42,[16],[2],17]],[1,2,-0.45,2]],[67,4],[31,"Protobuf","90QEAfdehNLIHjeemgjR58",3,[[68,-43,26]]],[37,"Camera",6,[-44],[1,0,0,1000]],[61,0,1073741824,667,2000,6,41943040,22,[4,4278190080]]],0,[0,-1,14,0,-2,15,0,-3,16,0,-4,17,0,-5,18,0,-6,19,0,9,10,0,10,20,0,-1,11,0,-2,7,0,-3,5,0,-4,21,0,-5,6,0,0,4,0,0,4,0,-3,20,0,-1,10,0,0,5,0,-1,8,0,-3,9,0,0,6,0,11,23,0,0,6,0,0,6,0,0,6,0,-1,22,0,0,7,0,0,7,0,0,8,0,0,8,0,-1,12,0,-2,13,0,5,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,0,19,0,0,21,0,-1,23,0,12,3,2,2,5,4,2,5,44],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,13,4,4,4,4,4,4,4,14],[1,26,1,2,1,27,1,2,1,2,1,2,1,2,1,2,1,2,28,4,29,30,31,32,33,4,34]],[[[22,[{}]]],0,0,[0],[6],[3]]]]
